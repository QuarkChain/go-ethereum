// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.276kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x7b\x93\xdb\x38\x72\xff\x7b\xae\xea\xbe\x43\x2f\x63\x9f\xa4\x78\x48\x6a\x46\xb6\x6f\x22\x91\xda\xf2\xf9\x1e\x71\x2a\xd9\xa7\xb7\x9c\xab\xbd\xad\x14\x48\xb4\x44\x78\x40\x80\x0b\x80\xd2\x68\xa7\xf4\xdd\x53\x00\x48\x8a\x94\x34\x63\xfb\xec\x54\xc5\x7f\x78\x48\x3c\xfa\xf9\x6b\x74\x37\xa8\xe4\xab\x3f\x7f\xfb\xfa\xed\xdf\xbf\xfb\x0b\x14\xa6\xe4\xcb\xdf\xff\x2e\xb1\x7f\x81\x13\xb1\x4e\x03\x14\xc1\xf2\xf7\xbf\xbb\x48\x0a\x24\xd4\x3e\x5c\x24\x25\x1a\x02\x79\x41\x94\x46\x93\x06\xb5\x59\x85\x37\x41\x6f\xa6\x30\xa6\x0a\xf1\xd7\x9a\x6d\xd2\xe0\xbf\xc3\x9f\x5e\x85\xaf\x65\x59\x11\xc3\x32\x8e\x01\xe4\x52\x18\x14\x26\x0d\xde\xfc\x25\x45\xba\xc6\xfe\x46\x41\x4a\x4c\x83\x0d\xc3\x6d\x25\x95\xe9\xad\xdd\x32\x6a\x8a\x94\xe2\x86\xe5\x18\xba\x97\x4b\x60\x82\x19\x46\x78\xa8\x73\xc2\x31\xbd\xb2\x74\x1c\x25\xc3\x0c\xc7\xe5\xfd\x7d\xf4\x0d\x9a\xad\x54\xb7\xfb\xfd\x1c\x5e\xd5\xa6\x40\x61\x58\x4e\x0c\x52\xf8\x2b\xa9\x73\x34\x49\xec\x57\x36\xdb\x38\x13\xb7\x50\x28\x5c\xa5\x81\x95\x5f\xcf\xe3\x38\xa7\xe2\xbd\x8e\x72\x2e\x6b\xba\xe2\x44\x61\x94\xcb\x32\x26\xef\xc9\x5d\xcc\x59\xa6\x63\xb3\x65\xc6\xa0\x0a\x33\x29\x8d\x36\x8a\x54\xf1\x2c\x9a\x45\x7f\x8c\x73\xad\xe3\x6e\x2c\x2a\x99\x88\x72\xad\x03\x50\xc8\xd3\x40\x9b\x1d\x47\x5d\x20\x9a\x00\xe2\xe5\x3f\xc9\x78\x25\x85\x09\xc9\x16\xb5\x2c\x31\x7e\x1e\xfd\x31\x9a\x3a\x9e\xfd\xe1\x0f\xb0\x75\x8c\x75\xae\x58\x65\x40\xab\xfc\xa3\x39\xbf\xff\xb5\x46\xb5\x8b\x67\xd1\x55\x74\xd5\xbc\x38\x4e\xef\x75\xb0\x4c\x62\x4f\x70\xf9\x79\xc4\x43\x21\xcd\x2e\xbe\x8e\x9e\x47\x57\x71\x45\xf2\x5b\xb2\x46\xda\xb2\xb2\x53\x51\x3b\xf8\xe5\x18\x3f\xe4\xc8\xf7\xc7\x7e\xfc\x22\xdc\x4a\x59\xa2\x30\xd1\x7b\x1d\x5f\x47\x57\x37\xd1\xb4\x1d\x38\xc3\xc0\xb3\xb0\xbe\x73\xdc\x2e\xa2\x0d\x2a\x0b\x62\x1e\xe6\x28\x0c\x2a\xb8\x77\xc3\x17\x25\x13\x61\x81\x6c\x5d\x98\x39\x5c\x4d\xa7\x4f\x17\x67\x87\x37\x45\x33\x4e\x99\xae\x38\xd9\xcd\x61\xc5\xf1\xae\x19\x23\x9c\xad\x45\xc8\x0c\x96\x7a\x0e\x9e\xba\x9f\xd9\x7b\xce\x95\x92\x6b\x85\x5a\xb7\x2c\x2b\xa9\x99\x61\x52\xcc\x2d\xc0\x88\x61\x1b\x3c\xbf\x5c\x57\x44\x9c\xee\x21\x99\x96\xbc\x36\x78\x2c\x50\xc6\x65\x7e\xdb\x0c\xba\x30\x1f\xe8\x93\x4b\x2e\xd5\x1c\xb6\x05\x6b\x77\x82\x67\x07\x95\xc2\x96\x09\x54\x84\x52\x26\xd6\x73\x78\x59\xb5\xca\x41\x49\xd4\x9a\x89\x39\x4c\xfb\xdb\x92\xb8\x33\x6d\x12\x37\x87\x9b\x7d\xce\x24\xdd\x79\xef\x52\xb6\x81\x9c\x13\xad\xd3\xe0\xc8\xf2\xfe\xd4\x1a\xac\xb0\x87\x15\x61\xa2\x9b\x1b\x4c\x2a\xb9\x0d\xc0\xb1\x4b\x03\x2f\x4c\x98\x49\x63\x64\x39\x87\x2b\x2b\x67\xbb\xe7\x88\x22\x0f\xf9\x3a\xbc\xba\xee\x66\x2f\x92\xe2\xaa\x25\x63\xf0\xce\x84\xce\x6d\x9d\xc3\x82\x65\xc2\xda\xcd\x2b\x02\x2b\x12\x66\xc4\x14\x01\x10\xc5\x48\x58\x30\x4a\x51\xa4\x81\x51\x35\x5a\x94\xb1\x25\xf4\x0f\xc9\x07\xce\xc8\xe2\xaa\x93\x2c\xa6\x6c\xd3\xaa\xd6\x7f\x3e\x52\xf3\x11\x4d\x6e\xa0\x79\x90\xab\x95\x46\x13\xf6\x15\xeb\xad\x66\xa2\xaa\x4d\xb8\x56\xb2\xae\x0e\x0b\x2e\x12\x37\x0c\x8c\xa6\x41\xad\x78\xd0\x24\x0b\xf7\x68\x76\x55\x63\x90\xa0\x53\x5f\xaa\x32\xb4\x2e\x51\x92\x07\x50\x71\x92\x63\x21\x39\x45\x95\x06\x3f\xca\x9c\x11\x0e\xc2\x6b\x0e\x3f\xfd\xf0\x9f\xd0\xf8\x8e\x89\x35\xec\x64\xad\xe0\x1d\x66\xb3\xef\x81\x50\x6a\x31\x1c\x45\x51\x10\xf7\xe4\x70\x90\x3e\x15\x35\xcc\x8c\xe8\x89\x7b\x91\x64\xb5\x31\xb2\x5b\x99\x19\x01\x99\x11\x21\xc5\x15\xa9\xb9\x01\xaa\x64\x45\xe5\x56\x84\x46\xae\xd7\x36\x31\x7a\x25\xfc\xa6\x00\x28\x31\xa4\x99\x4a\x83\x76\x6d\xeb\x49\xa2\x2b\x59\xd5\x55\xe3\x4b\x3f\x88\x77\x15\x11\x14\xa9\xf5\x3c\xd7\x18\x2c\xff\xc6\x36\x08\x25\xc2\xbb\xd9\xf7\x17\xc7\xb0\xc8\x89\x42\x13\xf6\x49\x9e\x80\x23\x89\xbd\x28\x8d\x46\xd0\xfc\x4b\x6a\xde\x92\xea\x34\x28\x51\xd4\x30\x78\x0b\x95\x3d\x75\x82\xe5\xfd\xbd\x22\x62\x8d\xf0\x84\xd1\xbb\x4b\x78\x42\x4a\x59\x0b\x03\xf3\x14\xa2\x57\xee\x51\xef\xf7\x43\xf2\x00\x09\x67\xcb\x84\x3c\x06\x72\x90\x22\xe7\x2c\xbf\x4d\x03\xc3\x50\xa5\xf7\xf7\x96\xfa\x7e\xbf\x80\xfb\x7b\xb6\x82\x27\xd1\x0f\x98\x93\xca\xe4\x05\xd9\xef\xd7\xaa\x7d\x8e\xf0\x0e\xf3\xda\xe0\x78\x72\x7f\x8f\x5c\xe3\x7e\xaf\xeb\xac\x64\x66\xdc\x6e\xb7\xe3\x82\xee\xf7\x56\xe8\x46\xd0\xfd\x1e\x62\x4b\x54\x50\xbc\x83\x27\xd1\x77\xa8\x98\xa4\x1a\xfc\xfa\x24\x26\xcb\x24\xe6\x6c\xd9\xec\x3b\x32\x53\x5c\xf3\x1e\x64\x62\x8b\x99\x03\xd6\x5d\xf4\x38\x69\xfb\xc2\x9e\x0b\x85\x75\xd8\x69\xd0\x60\x42\x33\x83\xb7\xb8\x4b\x83\xfb\xfb\xfe\xe6\x66\x36\x27\x9c\x67\xc4\xda\xc6\xab\xd7\x6d\xfa\x0d\x2d\x58\x37\x4c\xbb\x2a\x6c\xd9\x8a\xd0\x13\xfd\xa3\x03\xfc\xe8\x1c\x33\xb2\x9a\xc3\xec\xba\x7f\x88\x9d\x8b\xfd\x97\x47\xb1\x3f\x3b\xbf\xba\x22\x02\x39\xb8\xff\x43\x5d\x12\xde\x3e\x37\x61\xd3\x3f\x0f\x8e\x77\x85\xf6\xe0\xee\xa4\xeb\xd2\xc0\x74\x01\x72\x83\x6a\xc5\xe5\x76\x0e\xa4\x36\x72\x01\x25\xb9\xeb\x12\xe3\x6c\x3a\x1d\x88\x6e\x2b\x48\x92\x71\x74\x07\x8d\xc2\x5f\x6b\xd4\x46\x77\xc7\x8a\x9f\x72\xff\xdb\xd3\x85\xa2\xd0\x48\x8f\x2c\x62\x59\x5a\x0b\xbb\x55\x7d\x10\x1c\x4c\x7a\x56\xfc\x95\x94\x87\xcc\xd2\x97\xa4\xa1\xde\x4b\x88\xc1\x32\x31\xaa\xb7\xf0\x22\x31\xf4\x93\xf2\x82\x45\x45\x46\x34\x3e\x9c\x1b\xfc\x31\x67\x8d\xe0\x92\xb2\xab\x4b\x2c\x88\x7d\x8e\xd6\x49\x6c\xe8\xe7\x08\x50\x20\x51\x26\x43\x62\x3e\x46\x82\x55\x2d\xa8\x3e\x48\xf0\x6e\xf6\xfd\x67\xf3\xaf\x05\xdb\xa0\xd2\xcc\xec\x3e\x56\x00\xa4\x07\x09\xfc\xfb\x91\x0c\x49\x6c\xd4\x87\xdc\x3e\x78\xfb\x72\x01\xf7\xc1\xaa\x61\xb6\xfc\x77\xb9\x05\x2a\x51\x83\x29\x98\x06\x9b\xf9\xbe\x4e\xe2\x62\x76\x58\x53\x2d\xdf\xda\x99\x77\xb3\xef\x61\xe5\x92\x3f\x30\x0d\xaa\x16\x2e\x2b\x4a\x01\xa6\xc0\x61\xc1\xd0\x24\xd0\x08\xde\x4a\x5b\x80\x6d\x50\x18\x28\x09\x67\x39\x93\xb5\x06\x92\x1b\xa9\x34\xac\x94\x2c\x01\xef\x0a\x52\x6b\x63\x09\xd9\x88\x26\x1b\xc2\xb8\x43\xb6\x73\x2c\x48\x05\x24\xcf\xeb\xb2\xb6\x85\xa4\x58\x03\x0a\x59\xaf\x0b\x27\x89\x91\xe0\x73\x06\x97\x62\xdd\x49\xa3\x2b\x52\x02\x31\x86\xe4\xb7\xfa\x12\xda\x20\x05\xa2\x10\x0c\x43\x6a\x77\xe5\xb2\x2c\xa5\x80\x99\xa2\x50\x11\x65\x76\xa0\x87\x59\x9f\xe4\xb9\x4b\x40\x11\xbc\x12\x3b\x29\x10\x0a\xb2\x71\xf2\xc1\x5b\xdf\x0d\x58\xa9\xfe\x4a\x72\xcc\xa4\xec\x56\x43\x49\x76\x2d\xbb\x46\xf6\x2d\x33\x05\xf3\xc6\xa9\x50\x95\x76\x2b\x05\xce\x4a\x66\x74\x94\xc4\x55\xef\x8c\x3b\xe4\x4d\x1e\x16\x52\xb1\xdf\x6c\xcd\xc1\x07\x07\x9a\x39\x0a\xf5\xf6\xb4\x72\x6e\xe7\xb8\x32\x73\x78\xee\x4f\xab\x63\x38\x37\x2d\xcc\x39\x2c\xb7\x34\x5d\x7b\x68\x13\xc1\x1c\x66\xbe\xe4\xf4\x69\x9e\x9a\xbe\x08\xf4\x08\x6c\x9e\xeb\xcd\x4d\x75\xd7\x09\xd2\x15\xae\xd3\x8e\x8a\x85\xc0\xd0\x2e\x1b\xd6\x59\xf2\x12\x4a\x72\x8b\x40\x20\x21\x47\x7d\x6e\x23\xb5\x6b\x90\x98\x6b\xf5\x63\xb3\x45\x34\x5f\xdb\x10\x4e\x7f\xf0\x04\x99\x58\x3f\xbd\x9e\x7a\x48\xda\x07\x4b\xfe\xe9\xf5\x94\x09\x23\x9f\x5e\x4f\xa7\x77\xd3\x8f\xfc\xf7\xf4\x7a\x2a\xc5\xd3\xeb\xa9\x29\xf0\xe9\xf5\xf4\xe9\xf5\xac\x0f\x66\x3f\xe2\xca\x3e\xbb\x04\xb5\x65\xd5\x02\x3c\x00\x43\xd4\x1a\x4d\x1a\xfc\x0f\xc9\x64\x6d\xe6\x19\x27\xe2\x36\x58\x3a\x59\x6d\x1d\xe0\x50\x70\xa6\x72\x84\x8a\x68\x8b\x07\x2b\xab\x83\x48\x73\xa1\xa1\x61\xac\x6b\xa5\x64\x2d\x6c\x8a\x02\xab\xad\x8b\x4d\x31\xb2\x10\xb3\x26\x99\x44\x49\xa6\xe2\xe5\x6b\x59\xed\x42\x47\xc4\x6d\x3f\x31\xa0\xae\xab\x4a\x2a\x13\xf5\x0d\x49\x6c\xa3\xc2\x51\xc7\x37\xd3\x17\x37\x2f\x1f\x95\x5d\xdb\xe2\xd7\x29\xd0\x49\x48\x32\xb9\x41\xf0\xa5\x76\x26\xef\x80\x08\x0a\x2b\xa6\x10\xc8\x96\xec\xbe\x4a\x62\xda\x74\x49\x9f\x0f\xd9\x55\x13\x5c\xff\xbf\x30\xdb\x86\xfc\x25\x54\x75\xc6\x99\x2e\x80\x80\xc0\x2d\x24\xda\x28\x29\xd6\x4b\x37\x9a\xdb\xd6\xd1\xbd\x42\x25\xb5\x79\xd0\xfd\x58\x66\x48\xe9\x19\x00\x7c\x29\xff\x6f\xb7\xdb\xa8\xb5\xa3\x73\x7e\x81\xbc\x8a\xed\xd9\x57\x0b\x66\x76\xb1\x0f\x20\x29\xe2\xaf\x19\x4d\xaf\x6f\xae\x5f\xbe\xbc\x7e\xfe\x6f\x37\x2f\x5e\x5c\xdf\x3c\x7f\xf1\x10\x32\xac\x46\x9f\x0d\x0c\x5f\xdc\x7e\x23\x6d\x53\x79\xa8\x6c\x1d\x5e\xda\x4a\xca\x66\x69\x6a\xbb\x03\x15\xfc\xd3\x18\xaa\x85\x2d\x46\x42\xc2\xcf\x96\x11\x9f\x8a\xa2\x47\x24\xfb\x4c\x64\xb5\xe8\xb1\x40\x91\xb5\xb1\x1a\xb6\xbd\x36\x93\xa2\x43\xd3\x25\x68\x56\x56\x7c\x07\xf9\xc1\xef\x67\x60\xf5\xa0\x4f\x3e\x88\xaa\xa1\xd7\x3c\xc6\x5c\xd6\x2f\x25\x45\x9b\xef\x75\xad\x73\xac\xdc\x55\xad\xcd\xa2\x7f\xda\xfd\x46\x84\x61\x02\xdb\x6c\x1b\xc1\xb7\x82\xef\xa0\xd6\x08\x2b\xa9\x80\x62\x56\xaf\xd7\xae\x40\x50\x50\x29\xb6\x21\x06\xdb\x14\xab\x5b\x50\x74\x90\xe8\x37\x1b\xb6\xe0\xe1\xfd\xe2\xe3\xef\xb2\x86\x9c\x08\x30\x8a\xe4\xb7\x3e\x56\x6a\xa5\x6c\xac\x54\xe8\x15\xea\xf2\x7c\x86\x5c\x6e\xdd\x12\xaf\xfa\x8a\x21\x77\x49\x5f\x23\x42\x21\xb7\x50\xd6\xb9\x8b\x47\x9b\xd4\x9d\x1e\x5b\xc2\x0c\xd4\xc2\x30\xee\xed\x69\x6a\x25\x6c\x89\x80\xc3\x24\x7d\xd2\x92\x25\x58\x2e\xdf\x16\x78\xa6\x20\xea\x7a\x29\x50\xf8\xda\x2f\x87\x4a\x49\x83\xb9\xf5\x28\x90\x35\x61\x42\x5b\xaf\xb8\x3a\x00\xcb\x8f\xeb\xb5\x0e\x8f\xed\x53\xef\x96\xd1\x2f\x89\x63\xf8\x1b\x97\x19\xe1\xb0\xb1\x88\xcf\xb8\x2d\xe9\x24\x14\xd2\x9a\xa0\x67\x35\x6d\x88\xa9\x35\xc8\x95\x1b\xf5\x0a\x38\x02\x1b\xa2\xac\x37\xb1\xac\x0c\xa4\xed\x8d\x98\x1d\xd4\xa8\x36\xed\xad\x9f\x7d\xb7\xdd\xf5\x70\x45\xe7\x81\x14\x7e\xfe\x65\xd1\x84\x7b\x1c\xc3\x9f\x71\xe5\x30\x62\xd1\xee\xf5\x37\x05\x31\x90\x2b\x24\x06\x35\xe4\x5c\xea\x5a\x79\x39\xa9\x92\x15\x58\x59\x5b\x5a\x1d\x71\x3b\x53\x39\x8e\x2d\x95\x71\x41\x74\x31\x69\x2f\xf6\x14\x3a\xaf\x75\x93\xdd\xc4\x85\x45\xe2\xd8\x92\x60\xe9\x74\x01\x2c\x69\x49\x47\x1c\xc5\xda\x14\x0b\x60\xcf\x9e\x1d\x56\x5f\xb0\x15\x8c\xdb\x25\x3f\xb3\x5f\x22\x73\x17\x59\x46\x90\xa6\x30\x60\xe8\x78\x36\x94\x74\xc5\x59\x8e\x63\x76\x09\x57\x93\x45\x37\x9d\x29\x24\xb7\xdd\x6b\xeb\xdb\xe6\xaf\xff\xb3\x5f\x1c\x19\xc9\x79\x63\x60\x26\xdf\xa9\x6b\x20\xb0\x66\xda\x40\xad\x38\x34\xf1\xed\x3d\x72\x70\x90\x5b\xd8\x37\xd0\x09\x60\x9b\x87\x06\x6c\x9d\x2a\x9e\x50\xa4\x51\xd0\xf1\x7f\xfc\xf8\xed\x37\x91\x36\x8a\x89\x35\x5b\xed\xc6\xf7\xb5\xe2\x73\x78\x32\x0e\xfe\xa5\x56\x3c\x98\xfc\x3c\xfd\x25\xda\x10\x5e\xe3\xa5\xf3\xff\xdc\xfd\x7f\xc2\xe6\x12\x9a\xc7\x39\x0c\x39\xee\x27\x93\xc5\x03\x17\x1b\xbd\xbb\x18\x85\x1a\xcd\xd8\xae\x3c\xc4\xc4\x89\xa1\x08\x94\x68\x0a\xe9\x02\x5b\x61\x2e\x85\xc0\xdc\x40\x5d\x49\xd1\xd8\x05\xb8\xd4\xba\x87\xcd\x76\x49\x7a\x06\x23\xcd\x8e\xd4\xe5\xf2\x77\x98\xfd\x28\xf3\x5b\x34\xe3\xf1\x78\xcb\x04\x95\xdb\x88\x4b\x7f\x14\x47\x36\x86\x65\x2e\x39\xa4\x69\x0a\x4d\x9e\x0d\x26\xf0\x35\x04\x5b\x6d\x33\x6e\x00\x73\xfb\x68\x9f\x26\xf0\x0c\x8e\xb7\x17\xb6\x1c\x78\x06\x41\x4c\x2a\x16\x4c\xda\x10\x69\xed\x2f\x45\x89\x5a\x93\x35\xf6\x65\x74\x8d\xd3\x01\x74\x56\x97\x52\xaf\x21\x05\xe7\xa8\x8a\x28\x8d\x7e\x4d\x64\x9b\xf6\x0e\x7d\x16\xc5\x6e\x5d\x9a\x82\xa8\x39\xef\xc1\xd6\x47\xca\xe2\x00\xc7\xe1\x96\xc8\xe7\xa4\xaf\xd2\x14\x6c\x1b\x6b\x8d\x4d\x7b\xbb\x2d\x14\x7c\xc3\x3d\x89\x6c\x0e\x39\x6c\x99\x2c\x86\x08\x1f\x10\x44\xfa\x41\x8a\x48\x8f\x49\x22\x7d\x90\xa6\xa8\xcb\x0c\xd5\xa3\x34\xfd\xc5\x44\x43\xd2\x19\xea\x8d\x30\xbd\xcd\x97\x70\xf5\x72\xf2\x20\x03\x54\x4a\x3e\x4c\x5f\x48\xb3\x1b\xdf\x73\xb2\xb3\x95\x11\x8c\x8c\xac\x5e\xbb\xab\x84\xd1\xa5\x4b\xac\x73\xe8\x48\x5c\xba\x9b\xdb\x39\x8c\xdc\x9b\x9d\x67\x25\xba\x5d\x2f\xa6\xd3\xe9\x25\xb4\x9f\x42\xfe\x44\x6c\x34\xa9\x1a\xf7\x0f\x8a\xa4\xeb\x3c\xb7\x09\xfe\xb3\x84\x6a\x88\x74\x62\x35\xef\x9f\x25\x58\x77\xf0\x0f\x24\x83\x3f\xfc\x01\x4e\x66\x8f\xb0\x18\xc7\xf0\x5f\xc4\xf6\xdb\x9c\xbb\x4b\x02\x77\x37\xd0\x6d\x28\x99\xd6\xae\xeb\xd6\x40\xa5\xc0\x76\xd3\x27\x1e\xe8\x27\x62\x36\xeb\x60\x09\xd3\x63\x19\xed\xf9\xd6\x3b\xf0\xcf\xe4\x81\x3e\xe1\xa3\x13\xfe\x62\x3f\x60\x39\xd8\xcc\x4a\x84\xaf\x52\x08\x82\xc1\xfe\x93\x25\x76\xc5\x81\xde\x85\x46\xf3\xd6\x7b\x65\xdc\xe4\xbf\x73\xa9\x69\x72\x09\xb3\xe9\x74\x3a\x39\x23\xc8\xbe\x67\xe8\x57\x95\x2d\x95\x80\x88\x9d\x3b\xe6\x3a\x2b\xbb\x7a\xd1\x96\x3d\xf6\x98\xe2\x90\x4b\xce\x7d\x99\xd2\xee\xb5\xa6\x6e\x2e\x4c\x52\x08\xaf\x16\xe7\x32\x65\xcf\xa6\x7d\x0d\x8f\x5d\x75\xc6\x0d\x27\xee\x1a\x1a\xef\x68\x75\x78\x35\x70\xd0\xc0\x77\x0f\x38\xe9\xa2\x93\x9d\xf5\x4c\x7b\xec\xbb\x9e\xf3\x4e\xad\xd7\x53\xc3\x13\x7b\x76\xf5\xb1\xda\x74\xf3\x55\xad\x8b\xf1\x91\xbc\x93\x93\xea\xc0\x3a\xea\x8d\x41\x65\x2b\x65\x69\x73\x92\x75\x8c\xed\x05\x14\x9e\xf8\xc7\x95\xeb\x0a\x43\x85\x82\xa2\x6a\x4b\x07\x5f\xdd\xdb\xca\x6f\xe8\x3f\xdf\x59\x0e\x00\xd6\x53\xeb\xc4\xcc\x0b\x60\xb0\xb4\xe5\x1d\xb0\x30\xec\x2b\xe4\x8a\x31\x29\x10\x00\xe0\x28\x42\x1c\x82\x87\x10\xb6\xab\x91\x93\x4a\x23\x85\x14\xfc\xb7\xec\xf1\x24\xaa\x05\xbb\x1b\x4f\xc2\xe6\xfd\x98\x48\x3b\xbf\xe8\xb5\x8c\xad\x02\xcf\x52\x08\x12\xa3\x80\xd1\x74\x14\xc0\xb3\x73\x21\x6a\x33\xec\x68\xd9\x13\xa2\xbf\x17\x20\x31\x74\xe9\x6e\x44\x7d\xf3\xf6\x8f\x20\x23\xf9\xed\xda\x35\x46\x73\x5b\x5e\x8d\x4f\xe8\x92\x0d\x31\x44\x39\xb2\x93\x05\x1c\x96\x37\x5d\x63\x6e\x1d\xb5\x00\xdf\x9e\xba\x9b\x57\xe8\x3e\x1f\xb8\xb7\x4c\x2a\x8a\x2a\x54\x84\xb2\x5a\xcf\xe1\x79\x75\xb7\xf8\x47\xfb\x91\xc5\xdd\x12\x3f\x2e\x6b\xa5\x70\x79\x22\x52\x73\xe5\xf8\x0c\x82\x24\xb6\x0b\x3e\x48\xa7\x53\xb7\xff\xe5\x1c\xce\xdc\x86\x43\xf7\x31\xbb\x19\x2f\x19\xa5\x1c\xad\xc8\x3d\xfa\x36\x48\x2d\x0c\x06\xa1\x36\x64\x0a\xcd\x45\x78\x6f\xd7\x1e\x90\x6b\x7c\x6c\x4b\x77\xab\x3e\xb2\x48\x08\xad\xde\xcc\x59\xbe\xe9\xbf\xdd\xb0\x1a\x39\x83\x34\x3f\x8d\xa0\xb5\x72\xe5\xd5\x38\x6c\x90\x76\x09\x23\x6d\xeb\x3d\xaa\x47\x93\xa8\xa8\x4b\x22\xd8\x6f\x38\xb6\x39\x6c\xe2\x0d\xe6\xae\xe9\x83\x73\x07\xf7\x89\x38\x87\xab\xf3\x51\x9b\x11\x47\x8d\x29\x47\xad\x97\x9f\x1f\x1a\xfe\x39\x4c\x17\xa3\x4f\xb6\xd3\x79\x3e\x61\x46\x14\xf4\x5f\xc2\x36\x59\x83\x92\x96\x7f\x3b\x97\x11\x35\xf2\x17\x1c\xae\x36\x17\x72\x9b\x8e\x66\xd3\x4e\x4c\xef\x70\xe7\xef\x51\x83\xba\x53\x97\x58\x39\xdb\x40\x5d\xc2\x6c\xfa\x45\xe4\xf5\xd7\x24\x47\x3a\x18\xc5\x2a\xa4\x40\x72\xc3\x36\xf8\x7f\xa1\xca\x97\x30\xf4\x27\x0b\x69\xf1\xd8\xda\xcf\xc1\x75\x20\xb1\x9d\xed\xcc\xfb\xaf\x36\xf6\x20\x76\x46\x7e\x06\xc1\x79\x55\x1e\x46\xe4\xf1\xd2\xa3\x48\x7f\xe4\x1c\x70\x9f\xa0\x82\xd3\x9c\x63\xab\xe5\xee\x5b\xe6\x24\x2a\x4c\xc9\xc7\x41\x62\xdc\x2f\x5d\xac\xe4\x1d\x0d\x47\xc2\x0f\x1f\x17\x83\xfb\xa3\x56\xc6\x76\xf5\x78\xd4\x6c\x41\xaf\x9e\xe9\x1a\xb2\xb6\x78\x81\x7d\xff\x27\x42\x71\x0c\x3f\x1a\xa2\x0c\x10\xf8\xe9\x0d\xd4\x15\x25\xc6\xa6\x38\x09\x36\x8d\xfa\xef\x29\xed\x6f\x88\x32\xa2\x34\xac\xa4\xda\x12\x45\x9b\x5b\x1c\x53\xe0\xce\x7d\xef\xe9\xca\x46\x8d\xe6\x8d\x3d\xdd\x36\x84\x8f\x4f\xfb\xbf\x27\xe3\x51\xd4\xf7\xff\x68\x12\x21\xc9\x8b\x33\x2b\x5d\x42\xeb\x58\xa7\xf0\x8d\x6b\x25\xc6\x4f\xc6\xa6\x60\x7a\x12\x11\x63\xd4\x78\x34\x80\xc6\x68\x62\xbd\x7c\xd5\x6f\xcc\xba\xfd\xc9\x30\xd0\x1e\xa3\x72\x28\xc8\x0f\x45\x43\xbb\x3e\xd7\x7a\xec\x81\x36\xba\xec\x51\x1f\xe2\x6c\xf4\x74\x74\xf0\xd9\x21\xe6\x0f\xba\xa4\xe7\x85\x19\x10\x1f\xd9\xd0\x1b\x9d\x4a\x40\x28\x7d\x6d\x63\x6a\x1c\x9c\x89\xff\x53\xac\x4c\x0e\x66\xf7\xc7\xf9\xe3\xf6\xf6\x3f\xb1\x78\xc0\xd8\x8c\x8e\x26\x91\xae\x33\x7f\x67\x31\x7e\x71\x68\xe9\xda\x75\x0e\xcf\xc7\xb9\xe2\xa4\xf4\xb0\x3c\x86\xe5\x47\x78\x54\xae\x3c\x92\x56\x5a\x9e\x8d\x66\xfb\x4b\x6b\xfa\xe9\xa4\x77\x09\xf6\x17\x6d\x6b\x32\xff\xc5\x60\x8b\x99\x76\x37\x0c\xd0\xc4\x80\xbb\xec\xf1\x97\x3a\xaf\xbe\x7b\xd3\xbf\xd8\xe9\xc2\x64\xec\x59\x74\x3f\xff\x3b\x7b\x8d\x72\xf6\x07\x87\xdb\xed\x36\x5a\x4b\xb9\xe6\xfe\xa7\x86\xdd\x3d\x4b\x4c\x2a\x16\xbd\xd7\x01\x10\xbd\x13\x39\x50\x5c\xa1\x5a\xf6\xe8\xb7\x97\x2f\x49\xdc\xfc\xe4\x2d\x89\x9b\x9f\xff\xfe\x6f\x00\x00\x00\xff\xff\x51\xba\xc7\xcc\x10\x2c\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x8d, 0xb, 0x7a, 0xfd, 0x70, 0x68, 0x68, 0xd2, 0xd8, 0xf3, 0xf6, 0xac, 0x72, 0xed, 0xc2, 0x76, 0x18, 0x2d, 0x1, 0xe5, 0x3b, 0x55, 0xb, 0xce, 0xfc, 0xb6, 0xd5, 0x59, 0xc3, 0x94, 0x5b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
