// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.276kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x7b\x73\xdb\x38\x92\xff\xdb\x5b\xb5\xdf\xa1\x87\x17\xaf\xa4\xb3\x49\xca\x76\x92\xf5\x49\xa4\xa6\xb2\xd9\xd9\xbd\x5c\xdd\xcd\x33\x53\x73\x5b\xb3\x53\x57\x20\xd1\x12\x11\x83\x00\x07\x00\x25\x6b\x5c\xfa\xee\x57\x00\x48\x8a\x94\x64\x27\x99\xe4\xaa\x2e\x7f\xc4\x24\x1e\xfd\xfc\x35\xba\x1b\x54\xf2\xc5\x5f\xbf\x79\xfd\xf6\x1f\xdf\x7e\x05\x85\x29\xf9\xe2\x8f\x7f\x48\xec\x5f\xe0\x44\xac\xd2\x00\x45\xb0\xf8\xe3\x1f\xce\x92\x02\x09\xb5\x0f\x67\x49\x89\x86\x40\x5e\x10\xa5\xd1\xa4\x41\x6d\x96\xe1\x6d\xd0\x9b\x29\x8c\xa9\x42\xfc\xb5\x66\xeb\x34\xf8\xef\xf0\xc7\x57\xe1\x6b\x59\x56\xc4\xb0\x8c\x63\x00\xb9\x14\x06\x85\x49\x83\x37\x5f\xa5\x48\x57\xd8\xdf\x28\x48\x89\x69\xb0\x66\xb8\xa9\xa4\x32\xbd\xb5\x1b\x46\x4d\x91\x52\x5c\xb3\x1c\x43\xf7\x72\x09\x4c\x30\xc3\x08\x0f\x75\x4e\x38\xa6\x57\x96\x8e\xa3\x64\x98\xe1\xb8\x78\x78\x88\xbe\x46\xb3\x91\xea\x6e\xb7\x9b\xc1\xab\xda\x14\x28\x0c\xcb\x89\x41\x0a\x7f\x23\x75\x8e\x26\x89\xfd\xca\x66\x1b\x67\xe2\x0e\x0a\x85\xcb\x34\xb0\xf2\xeb\x59\x1c\xe7\x54\xbc\xd3\x51\xce\x65\x4d\x97\x9c\x28\x8c\x72\x59\xc6\xe4\x1d\xb9\x8f\x39\xcb\x74\x6c\x36\xcc\x18\x54\x61\x26\xa5\xd1\x46\x91\x2a\xbe\x89\x6e\xa2\x3f\xc7\xb9\xd6\x71\x37\x16\x95\x4c\x44\xb9\xd6\x01\x28\xe4\x69\xa0\xcd\x96\xa3\x2e\x10\x4d\x00\xf1\xe2\x77\x32\x5e\x4a\x61\x42\xb2\x41\x2d\x4b\x8c\x9f\x47\x7f\x8e\xa6\x8e\x67\x7f\xf8\x3d\x6c\x1d\x63\x9d\x2b\x56\x19\xd0\x2a\xff\x60\xce\xef\x7e\xad\x51\x6d\xe3\x9b\xe8\x2a\xba\x6a\x5e\x1c\xa7\x77\x3a\x58\x24\xb1\x27\xb8\xf8\x34\xe2\xa1\x90\x66\x1b\x5f\x47\xcf\xa3\xab\xb8\x22\xf9\x1d\x59\x21\x6d\x59\xd9\xa9\xa8\x1d\xfc\x7c\x8c\x1f\x73\xe4\xbb\x43\x3f\x7e\x16\x6e\xa5\x2c\x51\x98\xe8\x9d\x8e\xaf\xa3\xab\xdb\x68\xda\x0e\x9c\x60\xe0\x59\x58\xdf\x39\x6e\x67\xd1\x1a\x95\x05\x31\x0f\x73\x14\x06\x15\x3c\xb8\xe1\xb3\x92\x89\xb0\x40\xb6\x2a\xcc\x0c\xae\xa6\xd3\xf3\xf9\xc9\xe1\x75\xd1\x8c\x53\xa6\x2b\x4e\xb6\x33\x58\x72\xbc\x6f\xc6\x08\x67\x2b\x11\x32\x83\xa5\x9e\x81\xa7\xee\x67\x76\x9e\x73\xa5\xe4\x4a\xa1\xd6\x2d\xcb\x4a\x6a\x66\x98\x14\x33\x0b\x30\x62\xd8\x1a\x4f\x2f\xd7\x15\x11\xc7\x7b\x48\xa6\x25\xaf\x0d\x1e\x0a\x94\x71\x99\xdf\x35\x83\x2e\xcc\x07\xfa\xe4\x92\x4b\x35\x83\x4d\xc1\xda\x9d\xe0\xd9\x41\xa5\xb0\x65\x02\x15\xa1\x94\x89\xd5\x0c\x5e\x56\xad\x72\x50\x12\xb5\x62\x62\x06\xd3\xfe\xb6\x24\xee\x4c\x9b\xc4\xcd\xe1\x66\x9f\x33\x49\xb7\xde\xbb\x94\xad\x21\xe7\x44\xeb\x34\x38\xb0\xbc\x3f\xb5\x06\x2b\xec\x61\x45\x98\xe8\xe6\x06\x93\x4a\x6e\x02\x70\xec\xd2\xc0\x0b\x13\x66\xd2\x18\x59\xce\xe0\xca\xca\xd9\xee\x39\xa0\xc8\x43\xbe\x0a\xaf\xae\xbb\xd9\xb3\xa4\xb8\x6a\xc9\x18\xbc\x37\xa1\x73\x5b\xe7\xb0\x60\x91\xb0\x76\xf3\x92\xc0\x92\x84\x19\x31\x45\x00\x44\x31\x12\x16\x8c\x52\x14\x69\x60\x54\x8d\x16\x65\x6c\x01\xfd\x43\xf2\x91\x33\xb2\xb8\xea\x24\x8b\x29\x5b\xb7\xaa\xf5\x9f\x0f\xd4\x7c\x42\x93\x5b\x68\x1e\xe4\x72\xa9\xd1\x84\x7d\xc5\x7a\xab\x99\xa8\x6a\x13\xae\x94\xac\xab\xfd\x82\xb3\xc4\x0d\x03\xa3\x69\x50\x2b\x1e\x34\xc9\xc2\x3d\x9a\x6d\xd5\x18\x24\xe8\xd4\x97\xaa\x0c\xad\x4b\x94\xe4\x01\x54\x9c\xe4\x58\x48\x4e\x51\xa5\xc1\x0f\x32\x67\x84\x83\xf0\x9a\xc3\x8f\xdf\xff\x27\x34\xbe\x63\x62\x05\x5b\x59\x2b\xf8\x09\xb3\x9b\xef\x80\x50\x6a\x31\x1c\x45\x51\x10\xf7\xe4\x70\x90\x3e\x16\x35\xcc\x8c\xe8\x89\x7b\x96\x64\xb5\x31\xb2\x5b\x99\x19\x01\x99\x11\x21\xc5\x25\xa9\xb9\x01\xaa\x64\x45\xe5\x46\x84\x46\xae\x56\x36\x31\x7a\x25\xfc\xa6\x00\x28\x31\xa4\x99\x4a\x83\x76\x6d\xeb\x49\xa2\x2b\x59\xd5\x55\xe3\x4b\x3f\x88\xf7\x15\x11\x14\xa9\xf5\x3c\xd7\x18\x2c\xfe\xce\xd6\x08\x25\xc2\x4f\x37\xdf\x9d\x1d\xc2\x22\x27\x0a\x4d\xd8\x27\x79\x04\x8e\x24\xf6\xa2\x34\x1a\x41\xf3\x2f\xa9\x79\x4b\xaa\xd3\xa0\x44\x51\xc3\xe0\x2d\x54\xf6\xd4\x09\x16\x0f\x0f\x8a\x88\x15\xc2\x33\x46\xef\x2f\xe1\x19\x29\x65\x2d\x0c\xcc\x52\x88\x5e\xb9\x47\xbd\xdb\x0d\xc9\x03\x24\x9c\x2d\x12\xf2\x14\xc8\x41\x8a\x9c\xb3\xfc\x2e\x0d\x0c\x43\x95\x3e\x3c\x58\xea\xbb\xdd\x1c\x1e\x1e\xd8\x12\x9e\x45\xdf\x63\x4e\x2a\x93\x17\x64\xb7\x5b\xa9\xf6\x39\xc2\x7b\xcc\x6b\x83\xe3\xc9\xc3\x03\x72\x8d\xbb\x9d\xae\xb3\x92\x99\x71\xbb\xdd\x8e\x0b\xba\xdb\x59\xa1\x1b\x41\x77\x3b\x88\x2d\x51\x41\xf1\x1e\x9e\x45\xdf\xa2\x62\x92\x6a\xf0\xeb\x93\x98\x2c\x92\x98\xb3\x45\xb3\xef\xc0\x4c\x71\xcd\x7b\x90\x89\x2d\x66\xf6\x58\x77\xd1\xe3\xa4\xed\x0b\x7b\x2a\x14\x56\x61\xa7\x41\x83\x09\xcd\x0c\xde\xe1\x36\x0d\x1e\x1e\xfa\x9b\x9b\xd9\x9c\x70\x9e\x11\x6b\x1b\xaf\x5e\xb7\xe9\x37\xb4\x60\x5d\x33\xed\xaa\xb0\x45\x2b\x42\x4f\xf4\x0f\x0e\xf0\x83\x73\xcc\xc8\x6a\x06\x37\xd7\xfd\x43\xec\x54\xec\xbf\x3c\x88\xfd\x9b\xd3\xab\x2b\x22\x90\x83\xfb\x3f\xd4\x25\xe1\xed\x73\x13\x36\xfd\xf3\xe0\x70\x57\x68\x0f\xee\x4e\xba\x2e\x0d\x4c\xe7\x20\xd7\xa8\x96\x5c\x6e\x66\x40\x6a\x23\xe7\x50\x92\xfb\x2e\x31\xde\x4c\xa7\x03\xd1\x6d\x05\x49\x32\x8e\xee\xa0\x51\xf8\x6b\x8d\xda\xe8\xee\x58\xf1\x53\xee\x7f\x7b\xba\x50\x14\x1a\xe9\x81\x45\x2c\x4b\x6b\x61\xb7\xaa\x0f\x82\xbd\x49\x4f\x8a\xbf\x94\x72\x9f\x59\xfa\x92\x34\xd4\x7b\x09\x31\x58\x24\x46\xf5\x16\x9e\x25\x86\x7e\x54\x5e\xb0\xa8\xc8\x88\xc6\xc7\x73\x83\x3f\xe6\xac\x11\x5c\x52\x76\x75\x89\x05\xb1\xcf\xd1\x3a\x89\x0d\xfd\x14\x01\x0a\x24\xca\x64\x48\xcc\x87\x48\xb0\xac\x05\xd5\x7b\x09\x7e\xba\xf9\xee\x93\xf9\xd7\x82\xad\x51\x69\x66\xb6\x1f\x2a\x00\xd2\xbd\x04\xfe\xfd\x40\x86\x24\x36\xea\x7d\x6e\x1f\xbc\x7d\xbe\x80\x7b\x6f\xd5\x70\xb3\xf8\x77\xb9\x01\x2a\x51\x83\x29\x98\x06\x9b\xf9\xbe\x4c\xe2\xe2\x66\xbf\xa6\x5a\xbc\xb5\x33\x5f\x99\x02\x15\x2c\x5d\xfa\x07\xa6\x41\xd5\xc2\xe5\x45\x29\xc0\x14\x38\x2c\x19\x9a\x14\x1a\xc1\x5b\x69\x4b\xb0\x35\x0a\x03\x25\xe1\x2c\x67\xb2\xd6\x40\x72\x23\x95\x86\xa5\x92\x25\xe0\x7d\x41\x6a\x6d\x2c\x21\x1b\xd3\x64\x4d\x18\x77\xd8\x76\xae\x05\xa9\x80\xe4\x79\x5d\xd6\xb6\x94\x14\x2b\x40\x21\xeb\x55\xd1\xc8\x62\x24\xf8\xbc\xc1\xa5\x58\x75\xf2\xe8\x8a\x94\x40\x8c\x21\xf9\x9d\xbe\x84\x36\x50\x81\x28\x04\xc3\x90\xda\x5d\xb9\x2c\x4b\x29\xe0\x46\x51\xa8\x88\x32\x5b\xd0\xc3\xcc\x4f\xf2\xdc\x25\xa1\x08\x5e\x89\xad\x14\x08\x05\x59\x3b\x09\xe1\xad\xef\x08\xac\x5c\x7f\x23\x39\x66\x52\x76\xab\xa1\x24\xdb\x96\x5d\x23\xfd\x86\x99\x82\x79\xf3\x54\xa8\x4a\xbb\x95\x02\x67\x25\x33\x3a\x4a\xe2\xaa\x77\xce\xed\x73\x27\x0f\x0b\xa9\xd8\x6f\xb6\xee\xe0\x83\x43\xcd\x1c\x84\x7b\x7b\x62\x39\xd7\x73\x5c\x9a\x19\x3c\xf7\x27\xd6\x21\xa4\x9b\x36\xe6\x14\x9e\x5b\x9a\xae\x45\xb4\xc9\x60\x06\x37\xbe\xec\xf4\xa9\x9e\x9a\xbe\x08\xf4\x00\x70\x9e\xeb\xed\x6d\x75\xdf\x09\xd2\x15\xaf\xd3\x8e\x8a\x05\xc1\xd0\x2e\x6b\xd6\x59\xf2\x12\x4a\x72\x87\x40\x20\x21\x07\xbd\x6e\x23\xb5\x6b\x92\x98\x6b\xf7\x63\xb3\x41\x34\x5f\xda\x30\x4e\xbf\xf7\x04\x99\x58\x9d\x5f\x4f\x3d\x28\xed\x83\x25\x7f\x7e\x3d\x65\xc2\xc8\xf3\xeb\xe9\xf4\x7e\xfa\x81\xff\xce\xaf\xa7\x52\x9c\x5f\x4f\x4d\x81\xe7\xd7\xd3\xf3\xeb\x9b\x3e\x9c\xfd\x88\x2b\xfd\xec\x12\xd4\x96\x55\x0b\xf1\x00\x0c\x51\x2b\x34\x69\xf0\x3f\x24\x93\xb5\x99\x65\x9c\x88\xbb\x60\xe1\x64\xb5\xb5\x80\x43\xc1\x89\xea\x11\x2a\xa2\x2d\x1e\xac\xac\x0e\x22\xcd\xa5\x86\x86\xb1\xae\x95\x92\xb5\xb0\x69\x0a\xac\xb6\x2e\x3e\xc5\xc8\x42\xcc\x9a\x64\x12\x25\x99\x8a\x17\xaf\x65\xb5\x0d\x1d\x11\xb7\xfd\xc8\x80\xba\xae\x2a\xa9\x4c\xd4\x37\x24\xb1\xcd\x0a\x47\x1d\xdf\x4e\x5f\xdc\xbe\x7c\x52\x76\x6d\x0b\x60\xa7\x40\x27\x21\xc9\xe4\x1a\xc1\x97\xdb\x99\xbc\x07\x22\x28\x2c\x99\x42\x20\x1b\xb2\xfd\x22\x89\x69\xd3\x29\x7d\x3a\x64\x97\x4d\x70\xfd\xff\xc2\x6c\x1b\xf2\x97\x50\xd5\x19\x67\xba\x00\x02\x02\x37\x90\x68\xa3\xa4\x58\x2d\xdc\x68\x6e\xdb\x47\xf7\x0a\x95\xd4\xe6\x51\xf7\x63\x99\x21\xa5\x27\x00\xf0\xb9\xfc\xbf\xd9\x6c\xa2\xd6\x8e\xce\xf9\x05\xf2\x2a\xb6\x67\x5f\x2d\x98\xd9\xc6\x3e\x80\xa4\x88\xbf\x64\x34\xbd\xbe\xbd\x7e\xf9\xf2\xfa\xf9\xbf\xdd\xbe\x78\x71\x7d\xfb\xfc\xc5\x63\xc8\xb0\x1a\x7d\x32\x30\x7c\x81\xfb\xb5\xb4\x8d\xe5\xbe\xba\xf5\x80\x69\xcb\x29\x9b\xaa\xa9\x6d\x11\x54\xf0\xbb\x41\x54\x0b\x5b\x91\x84\x84\x9f\xac\x25\x3e\x06\x46\x0e\x47\x4f\x88\xf6\x89\xd8\x6a\xf1\x63\xa1\x22\x6b\x63\x55\x6c\x3b\x6e\x26\x45\x87\xa7\x4b\xd0\xac\xac\xf8\x16\xf2\xbd\xe7\x4f\x00\xeb\x51\xaf\xbc\x17\x57\x43\xbf\x79\x94\xb9\xdc\x5f\x4a\x8a\x36\xe7\xeb\x5a\xe7\x58\xb9\x0b\x5b\x9b\x47\xff\xb2\xfd\x8d\x08\xc3\x04\xb6\xf9\x36\x82\x6f\x04\xdf\x42\xad\x11\x96\x52\x01\xc5\xac\x5e\xad\x5c\x91\xa0\xa0\x52\x6c\x4d\x0c\xb6\x49\x56\xb7\xb0\xe8\x40\xd1\x6f\x39\x6c\xd9\xc3\xfb\x25\xc8\x3f\x64\x0d\x39\x11\x60\x14\xc9\xef\x7c\xb4\xd4\x4a\xd9\x68\xa9\xd0\x2b\xd4\x65\xfa\x0c\xb9\xdc\xb8\x25\x5e\xf5\x25\x43\xee\xd2\xbe\x46\x84\x42\x6e\xa0\xac\x73\x17\x91\x36\xad\x3b\x3d\x36\x84\x19\xa8\x85\x61\xdc\xdb\xd3\xd4\x4a\xd8\x22\x01\x87\x69\xfa\xa8\x31\x4b\xb0\x5c\xbc\x2d\xf0\x44\x51\xd4\x75\x54\xa0\xf0\xb5\x5f\x0e\x95\x92\x06\x73\xeb\x51\x20\x2b\xc2\x84\xb6\x5e\x71\x95\x00\x96\x1f\xd6\x71\xed\x1f\xdb\xa7\xde\x5d\xa3\x5f\x12\xc7\xf0\x77\x2e\x33\xc2\x61\x6d\x21\x9f\x71\x5b\xd8\x49\x28\xa4\x35\x41\xcf\x6a\xda\x10\x53\x6b\x90\x4b\x37\xea\x15\x70\x04\xd6\x44\x59\x6f\x62\x59\x19\x48\xdb\x7b\x31\x3b\xa8\x51\xad\xdb\xbb\x3f\xfb\x6e\x7b\xec\xe1\x8a\xce\x03\x29\xfc\xfc\xcb\xbc\x09\xf8\x38\x86\xbf\xe2\xd2\x61\xc4\xa2\xdd\xeb\x6f\x0a\x62\x20\x57\x48\x0c\x6a\xc8\xb9\xd4\xb5\xf2\x72\x52\x25\x2b\xb0\xb2\xb6\xb4\x3a\xe2\x76\xa6\x72\x1c\x5b\x2a\xe3\x82\xe8\x62\xd2\x5e\xef\x29\x74\x5e\xeb\x26\xbb\x89\x33\x8b\xc4\xb1\x25\xc1\xd2\xe9\x1c\x58\xd2\x92\x8e\x38\x8a\x95\x29\xe6\xc0\x2e\x2e\xf6\xab\xcf\xd8\x12\xc6\xed\x92\x9f\xd9\x2f\x91\xb9\x8f\x2c\x23\x48\x53\x18\x30\x74\x3c\x1b\x4a\xba\xe2\x2c\xc7\x31\xbb\x84\xab\xc9\xbc\x9b\xce\x14\x92\xbb\xee\xb5\xf5\x6d\xf3\xd7\xff\xd9\xcd\x0f\x8c\xe4\xbc\x31\x30\x93\xef\xd7\x35\x10\x58\x31\x6d\xa0\x56\x1c\x9a\xf8\xf6\x1e\xd9\x3b\xc8\x2d\xec\x1b\xe8\x08\xb0\xcd\x43\x03\xb6\x4e\x15\x4f\x28\xd2\x28\xe8\xf8\x3f\x7e\xf8\xe6\xeb\x48\x1b\xc5\xc4\x8a\x2d\xb7\xe3\x87\x5a\xf1\x19\x3c\x1b\x07\xff\x52\x2b\x1e\x4c\x7e\x9e\xfe\x12\xad\x09\xaf\xf1\xd2\xf9\x7f\xe6\xfe\x3f\x62\x73\x09\xcd\xe3\x0c\x86\x1c\x77\x93\xc9\xfc\x91\xeb\x8d\xde\x8d\x8c\x42\x8d\x66\x6c\x57\xee\x63\xe2\xc8\x50\x04\x4a\x34\x85\x74\x81\xad\x30\x97\x42\x60\x6e\xa0\xae\xa4\x68\xec\x02\x5c\x6a\xdd\xc3\x66\xbb\x24\x3d\x81\x91\x66\x47\xea\xb2\xf9\x4f\x98\xfd\x20\xf3\x3b\x34\xe3\xf1\x78\xc3\x04\x95\x9b\x88\x4b\x7f\x14\x47\x36\x86\x65\x2e\x39\xa4\x69\x0a\x4d\xa6\x0d\x26\xf0\x25\x04\x1b\x6d\x73\x6e\x00\x33\xfb\x68\x9f\x26\x70\x01\x87\xdb\x0b\x5b\x10\x5c\x40\x10\x93\x8a\x05\x93\x36\x44\x5a\xfb\x4b\x51\xa2\xd6\x64\x85\x7d\x19\x5d\xf3\xb4\x07\x9d\xd5\xa5\xd4\x2b\x48\xc1\x39\xaa\x22\x4a\xa3\x5f\x13\xd9\xd6\xbd\x43\x9f\x45\xb1\x5b\x97\xa6\x20\x6a\xce\x7b\xb0\xf5\x91\x32\xdf\xc3\x71\xb8\x25\xf2\x39\xe9\x8b\x34\x05\xdb\xcc\x5a\x63\xd3\xde\x6e\x0b\x05\xdf\x76\x4f\x22\x9b\x43\xf6\x5b\x26\xf3\x21\xc2\x07\x04\x91\xbe\x97\x22\xd2\x43\x92\x48\x1f\xa5\x29\xea\x32\x43\xf5\x24\x4d\x7f\x3d\xd1\x90\x74\x86\x7a\x23\x4c\x6f\xf3\x25\x5c\xbd\x9c\x3c\xca\x00\x95\x92\x8f\xd3\x17\xd2\x6c\xc7\x0f\x9c\x6c\x6d\x6d\x04\x23\x23\xab\xd7\xee\x42\x61\x74\xe9\x12\xeb\x0c\x3a\x12\x97\xee\xfe\x76\x06\x23\xf7\x66\xe7\x59\x89\x6e\xd7\x8b\xe9\x74\x7a\x09\xed\x07\x91\xbf\x10\x1b\x4d\xaa\xc6\xdd\xa3\x22\xe9\x3a\xcf\x6d\x82\xff\x24\xa1\x1a\x22\x9d\x58\xcd\xfb\x27\x09\xd6\x1d\xfc\x03\xc9\xe0\x4f\x7f\x82\xa3\xd9\x03\x2c\xc6\x31\xfc\x17\xb1\x1d\x37\xe7\xee\xa2\xc0\xdd\x0f\x74\x1b\x4a\xa6\xb5\xeb\xbb\x35\x50\x29\xb0\xdd\xf4\x91\x07\xfa\x91\x98\xcd\x3a\x58\xc0\xf4\x50\x46\x7b\xbe\xf5\x0e\xfc\x13\x79\xa0\x4f\xf8\xe0\x84\x3f\xdb\x0d\x58\x0e\x36\xb3\x12\xe1\x8b\x14\x82\x60\xb0\xff\x68\x89\x5d\xb1\xa7\x77\xa6\xd1\xbc\xf5\x5e\x19\x37\xf9\xef\x54\x6a\x9a\x5c\xc2\xcd\x74\x3a\x9d\x9c\x10\x64\xd7\x33\xf4\xab\xca\x96\x4a\x40\xc4\xd6\x1d\x73\x9d\x95\x5d\xbd\x68\xcb\x1e\x7b\x4c\x71\xc8\x25\xe7\xbe\x4c\x69\xf7\x5a\x53\x37\x57\x26\x29\x84\x57\xf3\x53\x99\xb2\x67\xd3\xbe\x86\x87\xae\x3a\xe1\x86\x23\x77\x0d\x8d\x77\xb0\x3a\xbc\x1a\x38\x68\xe0\xbb\x47\x9c\x74\xd6\xc9\xce\x7a\xa6\x3d\xf4\x5d\xcf\x79\xc7\xd6\xeb\xa9\xe1\x89\x5d\x5c\x7d\xa8\x36\xdd\x7c\x55\xeb\x62\x7c\x20\xef\xe4\xa8\x3a\xb0\x8e\x7a\x63\x50\xd9\x4a\x59\xda\x9c\x64\x1d\x63\x7b\x01\x85\x47\xfe\x71\xe5\xba\xc2\x50\xa1\xa0\xa8\xda\xd2\xc1\x57\xf7\xb6\xf2\x1b\xfa\xcf\xf7\x96\x03\x80\xf5\xd4\x3a\x32\xf3\x1c\x18\x2c\x6c\x79\x07\x2c\x0c\xfb\x0a\xb9\x62\x4c\x0a\x04\x00\x38\x88\x10\x87\xe0\x21\x84\xed\x6a\xe4\xa4\xd2\x48\x21\x05\xff\x45\x7b\x3c\x89\x6a\xc1\xee\xc7\x93\xb0\x79\x3f\x24\xd2\xce\xcf\x7b\x4d\x63\xab\xc0\x45\x0a\x41\x62\x14\x30\x9a\x8e\x02\xb8\x38\x15\xa2\x36\xc3\x8e\x16\x3d\x21\xfa\x7b\x01\x12\x43\x17\xee\x5e\xd4\x37\x6f\xff\x0c\x32\x92\xdf\xad\x5c\x63\x34\xb3\xe5\xd5\xf8\x88\x2e\x59\x13\x43\x94\x23\x3b\x99\xc3\x7e\x79\xd3\x36\xe6\xd6\x51\x73\xf0\xfd\xa9\xbb\x7f\x85\xee\x23\x82\x7b\xcb\xa4\xa2\xa8\x42\x45\x28\xab\xf5\x0c\x9e\x57\xf7\xf3\x7f\xb6\x9f\x5a\xdc\x5d\xf1\xd3\xb2\x56\x0a\x17\x47\x22\x35\x97\x8e\x17\x10\x24\xb1\x5d\xf0\x5e\x3a\x9d\xba\xfd\xef\xe7\x70\xe2\x4e\x1c\xba\x4f\xda\xcd\x78\xc9\x28\xe5\x68\x45\xee\xd1\xb7\x41\x6a\x61\x30\x08\xb5\x21\x53\x68\xae\xc3\x7b\xbb\x76\x80\x5c\xe3\x53\x5b\xba\xbb\xf5\x91\x45\x42\x68\xf5\x66\xce\xf2\x4d\xff\xed\x86\xd5\xc8\x19\xa4\xf9\x81\x04\xad\x95\x2b\xaf\xc6\x61\x83\xb4\x4b\x18\x69\x5b\xef\x51\x3d\x9a\x44\x45\x5d\x12\xc1\x7e\xc3\xb1\xcd\x61\x13\x6f\x30\x77\x59\x1f\x9c\x3a\xb8\x8f\xc4\xd9\x5f\xa0\x8f\xda\x8c\x38\x6a\x4c\x39\x6a\xbd\xfc\x7c\xdf\xf0\xcf\x60\x3a\x1f\x7d\xb4\x9d\x4e\xf3\x09\x33\xa2\xa0\xff\x12\xb6\xc9\x1a\x94\xb4\xfc\xdb\xb9\x8c\xa8\x91\xbf\xe1\x70\xb5\xb9\x90\x9b\x74\x74\x33\xed\xc4\xf4\x0e\x77\xfe\x1e\x35\xa8\x3b\x76\x89\x95\xb3\x0d\xd4\x05\xdc\x4c\x3f\x8b\xbc\xfe\x9a\xe4\x40\x07\xa3\x58\x85\x14\x48\x6e\xd8\x1a\xff\x2f\x54\xf9\x1c\x86\xfe\x68\x21\x2d\x1e\x5b\xfb\x39\xb8\x0e\x24\xb6\xb3\x9d\x79\xff\xd5\xc6\x1e\xc4\xce\xc8\x17\x10\x9c\x56\xe5\x71\x44\x1e\x2e\x3d\x88\xf4\x27\xce\x01\xf7\x21\x2a\x38\xce\x39\xb6\x5a\xee\xbe\x68\x4e\xa2\xc2\x94\x7c\x1c\x24\xc6\xfd\xde\xc5\x4a\xde\xd1\x70\x24\xfc\xf0\x61\x31\xb8\x3b\x68\x65\x6c\x57\x8f\x07\xcd\x16\xf4\xea\x99\xae\x21\x6b\x8b\x17\xd8\xf5\x7f\x28\x14\xc7\xf0\x83\x21\xca\x00\x81\x1f\xdf\x40\x5d\x51\x62\xfc\x17\x1f\x9b\x46\xfd\x17\x95\xf6\x97\x44\x19\x51\x1a\x96\x52\x6d\x88\xa2\xcd\x2d\x8e\x29\x70\xeb\xbe\xf8\x74\x65\xa3\x46\xf3\xc6\x9e\x6e\x6b\xc2\xc7\xc7\xfd\xdf\xb3\xf1\x28\xea\xfb\x7f\x34\x89\x90\xe4\xc5\x89\x95\x2e\xa1\x75\xac\x53\xf8\xda\xb5\x12\xe3\x67\x63\x53\x30\x3d\x89\x88\x31\x6a\x3c\x1a\x40\x63\x34\xb1\x5e\xbe\xea\x37\x66\xdd\xfe\x64\x18\x68\x4f\x51\xd9\x17\xe4\xfb\xa2\xa1\x5d\x9f\x6b\x3d\xf6\x40\x1b\x5d\xf6\xa8\x0f\x71\x36\x3a\x1f\xed\x7d\xb6\x8f\xf9\xbd\x2e\xe9\x69\x61\x06\xc4\x47\x36\xf4\x46\xc7\x12\x10\x4a\x5f\xdb\x98\x1a\x07\x27\xe2\xff\x18\x2b\x93\xbd\xd9\xfd\x71\xfe\xb4\xbd\xfd\x0f\x2d\x1e\x31\x36\xa3\xa3\x49\xa4\xeb\xcc\xdf\x59\x8c\x5f\xec\x5b\xba\x76\x9d\xc3\xf3\x61\xae\x38\x2a\x3d\x2c\x8f\x61\xf9\x11\x1e\x94\x2b\x4f\xa4\x95\x96\x67\xa3\xd9\xee\xd2\x9a\x7e\x3a\xe9\x5d\x82\x7d\xa5\x6d\x4d\xe6\xbf\x19\x6c\x30\xd3\xee\x86\x01\x9a\x18\x70\x97\x3d\xfe\x52\xe7\xd5\xb7\x6f\xfa\x17\x3b\x5d\x98\x8c\x3d\x8b\xee\x47\x80\x27\xaf\x51\x4e\xfe\xec\x70\xb3\xd9\x44\x2b\x29\x57\xdc\xff\xe0\xb0\xbb\x67\x89\x49\xc5\xa2\x77\x3a\x00\xa2\xb7\x22\x07\x8a\x4b\x54\x8b\x1e\xfd\xf6\xf2\x25\x89\x9b\x1f\xbe\x25\x71\xf3\x23\xe0\xff\x0d\x00\x00\xff\xff\xe6\xff\x22\xa5\x16\x2c\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x8d, 0xb, 0x7a, 0xfd, 0x70, 0x68, 0x68, 0xd2, 0xd8, 0xf3, 0xf6, 0xac, 0x72, 0xed, 0xc2, 0x76, 0x18, 0x2d, 0x1, 0xe5, 0x3b, 0x55, 0xb, 0xce, 0xfc, 0xb6, 0xd5, 0x59, 0xc3, 0x94, 0x5b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
