// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.276kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdb\x92\xdb\x36\xd2\xbe\x9e\x54\xe5\x1d\x3a\xfc\x9d\x88\xfa\x67\x48\x4a\x9e\x9c\x4a\x22\xb5\xe5\x75\xb2\x29\x6f\xd5\xe6\xb0\x49\x2a\xbb\x95\xe4\x02\x24\x5a\x22\x66\x40\x80\x01\x40\x69\x14\x95\xde\x7d\x0b\xe0\x41\x24\xa5\x19\xdb\x6b\xaf\x2f\x46\x24\xd0\xe8\xfe\xd0\xdd\xe8\x03\xe8\xf8\xa3\xaf\xbe\x7b\xf9\xd3\xbf\xbf\xff\x1a\x72\x53\xf0\xd5\x87\x1f\xc4\xf6\x17\x38\x11\x9b\xc4\x43\xe1\xad\x3e\xfc\xe0\x2a\xce\x91\x50\xfb\x70\x15\x17\x68\x08\x64\x39\x51\x1a\x4d\xe2\x55\x66\x1d\x7c\xe9\xf5\x66\x72\x63\xca\x00\xff\xa8\xd8\x36\xf1\xfe\x15\xfc\xfc\x22\x78\x29\x8b\x92\x18\x96\x72\xf4\x20\x93\xc2\xa0\x30\x89\xf7\xea\xeb\x04\xe9\x06\xfb\x0b\x05\x29\x30\xf1\xb6\x0c\x77\xa5\x54\xa6\x47\xbb\x63\xd4\xe4\x09\xc5\x2d\xcb\x30\x70\x2f\x37\xc0\x04\x33\x8c\xf0\x40\x67\x84\x63\x32\xb7\x7c\x1c\x27\xc3\x0c\xc7\xd5\xe1\x10\x7e\x8b\x66\x27\xd5\xfd\xf1\xb8\x80\xbf\x91\x2a\x43\x13\x47\xf5\x5c\x43\xc8\x99\xb8\x87\x5c\xe1\x3a\xf1\x2c\x62\xbd\x88\xa2\x8c\x8a\x3b\x1d\x66\x5c\x56\x74\xcd\x89\xc2\x30\x93\x45\x44\xee\xc8\x43\xc4\x59\xaa\x23\xb3\x63\xc6\xa0\x0a\x52\x29\x8d\x36\x8a\x94\xd1\x6d\x78\x1b\x7e\x11\x65\x5a\x47\xdd\x58\x58\x30\x11\x66\x5a\x7b\xa0\x90\x27\x9e\x36\x7b\x8e\x3a\x47\x34\x1e\x44\xab\xff\x52\xf0\x5a\x0a\x13\x90\x1d\x6a\x59\x60\xf4\x69\xf8\x45\x38\x73\x32\xfb\xc3\xaf\x11\xeb\x04\xeb\x4c\xb1\xd2\x80\x56\xd9\x1b\x4b\xbe\xfb\xa3\x42\xb5\x8f\x6e\xc3\x79\x38\x6f\x5e\x9c\xa4\x3b\xed\xad\xe2\xa8\x66\xb8\x7a\x37\xe6\x81\x90\x66\x1f\x3d\x0f\x3f\x0d\xe7\x51\x49\xb2\x7b\xb2\x41\xda\x8a\xb2\x53\x61\x3b\xf8\xfe\x04\x3f\x66\xc8\xbb\xb1\x1d\xdf\x8b\xb4\x42\x16\x28\x4c\x78\xa7\xa3\xe7\xe1\xfc\xcb\x70\xd6\x0e\x5c\x10\x50\x8b\xb0\xb6\x73\xd2\xae\xc2\x2d\x2a\xc3\x32\xc2\x83\x0c\x85\x41\x05\x07\x37\x7c\x55\x30\x11\xe4\xc8\x36\xb9\x59\xc0\x7c\x36\xfb\x78\x79\x71\x78\x9b\x37\xe3\x94\xe9\x92\x93\xfd\x02\xd6\x1c\x1f\x9a\x31\xc2\xd9\x46\x04\xcc\x60\xa1\x17\x50\x73\xaf\x67\x8e\xb5\xe4\x52\xc9\x8d\x42\xad\x5b\x91\xa5\xd4\xcc\x30\x29\x16\xd6\xc1\x88\x61\x5b\xbc\x4c\xae\x4b\x22\xce\xd7\x90\x54\x4b\x5e\x19\x1c\x03\x4a\xb9\xcc\xee\x9b\x41\x77\xb0\x07\xfb\xc9\x24\x97\x6a\x01\xbb\x9c\xb5\x2b\xa1\x16\x07\xa5\xc2\x56\x08\x94\x84\x52\x26\x36\x0b\xf8\xbc\x6c\x37\x07\x05\x51\x1b\x26\x16\x30\xeb\x2f\x8b\xa3\x4e\xb5\x71\xd4\x84\x33\xfb\x9c\x4a\xba\xaf\xad\x4b\xd9\x16\x32\x4e\xb4\x4e\xbc\x91\xe6\xeb\x38\x35\xa0\xb0\xe1\x89\x30\xd1\xcd\x0d\x26\x95\xdc\x79\xe0\xc4\x25\x5e\x0d\x26\x48\xa5\x31\xb2\x58\xc0\xdc\xe2\x6c\xd7\x8c\x38\xf2\x80\x6f\x82\xf9\xf3\x6e\xf6\x2a\xce\xe7\x2d\x1b\x83\x0f\x26\x70\x66\xeb\x0c\xe6\xad\x62\xd6\x2e\x5e\x13\x58\x93\x20\x25\x26\xf7\x80\x28\x46\x82\x9c\x51\x8a\x22\xf1\x8c\xaa\xd0\x7a\x19\x5b\x41\x3f\x2c\x76\x51\x31\x9f\x77\x58\x22\xca\xb6\xed\x66\xfa\xcf\xa3\x8d\x3d\x81\xfd\x4b\x68\x1e\xe4\x7a\xad\xd1\x04\xfd\xad\xf4\xa8\x99\x28\x2b\x13\x6c\x94\xac\xca\x13\xc1\x55\xec\x86\x81\xd1\xc4\xab\x14\xf7\x9a\x84\xe0\x1e\xcd\xbe\x6c\x54\xe0\x75\x1b\x96\xaa\x08\xac\x11\x94\xe4\x1e\x94\x9c\x64\x98\x4b\x4e\x51\x25\xde\x2b\xc7\x67\x2f\x2b\x05\xbf\x60\x7a\xfb\x03\xbc\xcc\x09\x13\x40\x28\xb5\x3e\x1a\x86\xa1\x17\xf5\xa4\x3a\x97\x3d\x07\x16\xa4\x46\xf4\xc0\x5d\xc5\x69\x65\x8c\xec\x28\x53\x23\x20\x35\x22\xa0\xb8\x26\x15\x37\x40\x95\x2c\xa9\xdc\x89\xc0\xc8\xcd\xc6\xa6\xba\x1a\x72\xbd\xc8\x03\x4a\x0c\x69\xa6\x12\xaf\xa5\x6d\x2d\x45\x74\x29\xcb\xaa\x6c\x6c\x55\x0f\xe2\x43\x49\x04\x45\x6a\x2d\xcb\x35\x7a\xab\x6f\xd8\x16\xa1\x40\xf8\xe5\xf6\x87\xab\xb1\xd9\x33\xa2\xd0\x04\x7d\x96\x67\xc6\x8f\xa3\x1a\x4a\xb3\x23\x68\xfe\xc5\x15\x6f\x59\x75\x3b\x28\x50\x54\x30\x78\x0b\x94\x8d\x2a\xde\xea\x70\x50\x44\x6c\x10\x9e\x31\xfa\x70\x03\xcf\x48\x21\x2b\x61\x60\x91\x40\xf8\xc2\x3d\xea\xe3\x71\xc8\x1e\x20\xe6\x6c\x15\x93\xa7\x9c\x18\xa4\xc8\x38\xcb\xee\x13\xcf\x30\x54\xc9\xe1\x60\xb9\x1f\x8f\x4b\x38\x1c\xd8\x1a\x9e\x85\xff\xc4\x8c\x94\x26\xcb\xc9\xf1\xb8\x51\xed\x73\x88\x0f\x98\x55\x06\xfd\xe9\xe1\x80\x5c\xe3\xf1\xa8\xab\xb4\x60\xc6\x6f\x97\xdb\x71\x41\x8f\x47\x0b\xba\x01\x7a\x3c\x42\x64\x99\x0a\x8a\x0f\xf0\x2c\xfc\x1e\x15\x93\x54\x43\x4d\x1f\x47\x64\x15\x47\x9c\xad\x9a\x75\x23\x35\x45\x15\xef\xb9\x4c\x64\x7d\xe6\xe4\xd9\xee\xac\x38\xb4\x7d\xb0\x97\x1c\x7f\x13\x74\x3b\x68\x7c\x42\x33\x83\xf7\xb8\x4f\xbc\xc3\xa1\xbf\xb8\x99\xcd\x08\xe7\x29\xb1\xba\xa9\xb7\xd7\x2d\xfa\x13\xad\xb3\x6e\x99\x76\x75\xd5\xaa\x85\xd0\x83\xfe\xc6\xc7\x79\x14\xa7\x8c\x2c\x17\x70\xfb\xbc\x1f\xa4\x2e\x9d\xf4\xcf\x47\x27\xfd\xf6\x32\x75\x49\x04\x72\x70\x7f\x03\x5d\x10\xde\x3e\x37\xc7\xa6\x7f\xfa\xc7\xab\x02\x1b\x98\x3b\x74\x5d\x98\x9f\x2d\x41\x6e\x51\xad\xb9\xdc\x2d\x80\x54\x46\x2e\xa1\x20\x0f\x5d\xe2\xbb\x9d\xcd\x06\xd0\x6d\x4d\x48\x52\x8e\x2e\xac\x28\xfc\xa3\x42\x6d\x74\x17\x44\xea\x29\xf7\xd7\xc6\x12\x8a\x42\x23\x1d\x69\xc4\x8a\xb4\x1a\x76\x54\x7d\x27\x38\xa9\xf4\x22\xfc\xb5\x94\xa7\xcc\xd1\x47\xd2\x70\xef\x25\x3c\x6f\x15\x1b\xd5\x23\xbc\x8a\x0d\x7d\xab\xb8\x6f\xbd\x22\x25\x1a\x1f\x8f\xfd\x75\x98\xb3\x4a\x70\x49\xd7\xd5\x1d\xd6\x89\xeb\x1c\xac\xe3\xc8\xd0\x77\x01\x90\x23\x51\x26\x45\x62\xde\x04\xc1\xba\x12\x54\x9f\x10\xfc\x72\xfb\xc3\x3b\xcb\xaf\x04\xdb\xa2\xd2\xcc\xec\xdf\x14\x00\xd2\x13\x82\xfa\x7d\x84\x21\x8e\x8c\x7a\x9d\xd9\x07\x6f\x8f\x1c\xb8\xd3\x63\xfb\xd4\x2b\x25\x6b\x92\x28\x82\x6f\xb8\x4c\x09\x87\xad\x05\x9f\x72\xd4\x60\x24\xd8\x7c\x06\x26\x47\xc8\x2a\xa5\x50\x18\xd0\x86\x98\x4a\x83\x5c\xbb\xd1\xb5\xcb\xe0\x8e\xc1\x96\x28\x20\xc6\x60\x51\x1a\x48\xda\xb2\xc7\x0e\x6a\x54\xdb\xb6\xb4\xb3\xef\x36\xc4\x0e\x29\xda\x33\x01\x09\xfc\xfa\xfb\xb2\x06\x67\x01\x7d\x85\x6b\x26\x10\x88\x55\x4e\x66\xcb\x38\x30\x39\x31\x90\x29\x24\x06\x35\x64\x5c\xea\x4a\xd5\x38\x6d\xae\x00\x8b\xb5\xe5\xd5\x31\xb7\x33\xa5\x93\xd8\x72\xf1\x73\xa2\xf3\x69\x5b\xbd\x29\x34\x95\x12\xa7\xc9\x6e\xe2\x6a\x2d\x15\xf8\x96\x05\x4b\x66\x4b\x60\x71\xcb\x3a\xe4\x28\x36\x26\x5f\x02\xbb\xbe\x3e\x51\x5f\xb1\x35\xf8\x2d\xc9\xaf\xec\xf7\xd0\x3c\x84\x56\x10\x24\x09\x0c\x04\x3a\x99\x0d\x27\x5d\x72\x96\xa1\xcf\x6e\x60\x3e\x5d\x76\xd3\xa9\x42\x72\xdf\xbd\xb6\xc1\xb4\xf9\xad\x7f\x8e\xcb\x91\x92\x9c\x35\x06\x6a\xaa\xc3\xb5\x06\x02\x1b\xa6\x0d\x54\x8a\x5b\x45\x59\xba\xda\x22\x27\x03\x39\xc2\xbe\x82\xce\x12\x49\xf3\xd0\x44\xf7\x6e\x2b\x35\xa3\x50\xa3\xa0\xfe\xdf\x7f\xfc\xee\xdb\x50\x1b\xc5\xc4\x86\xad\xf7\xfe\xa1\x52\x7c\x01\xcf\x7c\xef\xff\x6c\xf5\x34\xfd\x75\xf6\x7b\xb8\x25\xbc\xc2\x1b\x67\xff\x85\xfb\x7b\x26\xe6\x06\x9a\xc7\x05\x0c\x25\x1e\xa7\xd3\xe5\x23\xd9\xad\x97\x90\x15\x6a\x34\xbe\xa5\x3c\x25\xa1\x33\x45\x11\x28\xd0\xe4\x92\x5a\x65\x28\xcc\xa4\x10\x98\x19\xa8\x4a\x29\x1a\xbd\x00\x97\x5a\xf7\x7c\xb3\x25\x49\x2e\xf8\x48\xb3\x22\x01\x81\x3b\x5b\xe8\xfd\x28\xb3\x7b\x34\xbe\xef\xef\x98\xa0\x72\x17\x72\x99\x11\xbb\xc2\x76\x27\x46\x66\x92\x43\x92\x24\xd0\xf4\x6d\xde\x14\xfe\x02\xde\x4e\xdb\x0e\xce\x83\x85\x7d\xb4\x4f\x53\xb8\x86\xf1\xf2\x5c\x6a\x03\xd7\xe0\x45\xa4\x64\xde\xb4\x3d\x22\xad\xfe\xa5\x28\x50\x6b\xb2\xc1\x3e\x46\xdc\xa2\x30\x27\xa7\xb3\x7b\x29\xf4\x06\x12\x70\x86\x2a\x89\xd2\x58\xd3\x84\x36\x72\x77\xde\x67\xbd\xd8\xd1\x25\x09\x88\x8a\xf3\x9e\xdb\xd6\x27\x65\x79\x72\xc7\xe1\x92\xd0\xc5\x54\xf8\x28\x49\xc0\xc6\x32\xab\x6c\xda\x5b\x6d\x5d\xa1\x8e\xba\xd3\xd0\xc6\xd3\xd3\x92\xe9\x72\xe8\xe1\x03\x86\x48\x5f\xcb\x11\xe9\x98\x25\xd2\x47\x79\x8a\xaa\x48\x51\x3d\xc9\xb3\xce\x4e\x0d\x4b\xa7\xa8\x57\xc2\xf4\x16\xdf\xc0\xfc\xf3\xe9\xa3\x02\x50\x29\xf9\x38\x7f\x21\xcd\xde\x3f\x70\xb2\x97\x95\x59\xc0\xc4\xc8\xf2\xa5\xcb\x27\x93\x1b\xb0\xe2\x16\xd0\xb1\xb8\x71\xe5\xfb\x02\x26\xee\xcd\xce\xb3\x02\xdd\xaa\xcf\x66\xb3\xd9\x0d\xb4\xfd\xee\x5f\x89\x3d\x4d\xaa\xc2\xe3\xa3\x90\x74\x95\x65\xb6\x33\x7e\x27\x50\x0d\x93\x0e\x56\xf3\xfe\x4e\xc0\xba\xc0\x3f\x40\x06\x9f\x7c\x02\x67\xb3\x23\x5f\x8c\x22\xf8\x07\x51\xf7\xe0\xca\x39\x85\x5b\x26\x2b\x7d\xca\x23\x05\xd3\x9a\x89\x0d\x10\x0d\x54\x0a\x6c\x17\xbd\x65\x40\x3f\x83\xd9\xd0\xc1\x0a\x66\x63\x8c\x36\xbe\xf5\x02\xfe\x85\x3c\xd0\x67\x3c\x8a\xf0\x9d\x5e\x2e\x24\x11\x56\x20\x7c\x94\x80\xe7\x0d\xd6\x9f\x91\x58\x8a\x13\xbf\x2b\x8d\xe6\xa7\xda\x2a\x7e\x93\xff\x2e\xa5\xa6\xe9\x8d\xad\x55\x67\xd3\x0b\x40\x8e\x3d\x45\xbf\x28\x4b\x14\x14\x88\xd8\xbb\x30\xd7\x69\x99\x09\x23\xc1\x76\xb8\x36\x4c\x71\x5b\x8c\x73\x74\xb1\xa7\x5d\x6b\x55\x9d\xc9\xa2\x90\x02\x12\x08\xe6\xcb\x4b\x99\xb2\xa7\xd3\xfe\x0e\xc7\xa6\xba\x60\x86\x33\x73\x0d\x95\x37\xa2\x0e\xe6\x03\x03\x0d\x6c\xf7\x88\x91\xae\x3a\xec\xac\xa7\xda\xb1\xed\x7a\xc6\x3b\xd7\x5e\x6f\x1b\x35\xb3\xeb\xf9\x9b\xee\xa6\x9b\x2f\x2b\x9d\xfb\x23\xbc\xd3\xb3\xea\xc0\x1a\xea\x95\x41\x45\x0c\xba\xe6\xc4\x19\x06\x85\x61\x0a\xcf\xec\x03\x44\xd8\x42\x29\x50\x28\x28\xaa\xb6\x74\xb0\xbd\x4d\xdd\x87\x0c\xed\xe7\xae\xc0\x87\x0e\xd6\xdb\xd6\x99\x9a\x97\xc0\x60\x65\xcb\x3b\x60\x41\xd0\xdf\x90\x2b\xc6\xa4\x40\xdb\xcc\x8e\x4e\x88\xf3\xe0\xa1\x0b\x5b\x6a\xe4\xa4\xd4\x48\x21\x81\xfa\xc2\xd2\x9f\x86\x95\x60\x0f\xfe\x34\x68\xde\xc7\x4c\xda\xf9\x2e\x41\x3a\x23\xd6\x1b\xb8\x4e\xc0\x8b\x8d\xb2\xc5\xf7\xc4\x83\xeb\x4b\x47\xd4\x66\xd8\xc9\xaa\x07\xa2\xbf\x16\x20\x36\x74\xe5\x7a\xac\xba\x2b\xf8\xcd\xb3\x6d\xf1\x46\xc9\x4a\xd0\x85\x2d\xaf\xfc\x33\xbe\x64\x4b\x0c\x51\x8e\xed\x74\x09\x27\x72\xd7\x3d\x2f\x20\xb3\x86\x5a\x42\xdd\x85\xb9\x7e\x17\xba\x1e\xd2\xbd\xa5\x52\x51\x54\x81\x22\x94\x55\x7a\x01\x9f\x96\x0f\xcb\xdf\xda\x4e\xdb\xb5\x0a\x4f\x63\x2d\x15\xae\xce\x20\x65\x99\xbb\x31\xb9\x06\x2f\x8e\x2c\xc1\x6b\xf9\x74\xdb\xed\x5f\x8f\xc2\x85\x96\x08\xba\x1b\xcb\x66\xbc\x60\x94\x72\xb4\x90\x7b\xfc\xed\x21\xb5\x6e\x30\x38\x6a\x43\xa1\xd0\x74\x43\xbd\x55\x47\x40\xae\xf1\xa9\x25\x5d\x6b\x35\xb1\x9e\x10\xd8\x7d\x33\xa7\xf9\xa6\x4b\x73\xc3\x6a\xe2\x14\xd2\xdc\x7f\xd3\x4a\xb9\xf2\xca\x0f\x1a\x4f\xbb\x81\x89\xb6\xf5\x1e\xd5\x93\x69\x98\x57\x05\x11\xec\x4f\xf4\x6d\x0e\x9b\xd6\x0a\x73\xbd\x9a\x77\x29\x70\x9f\xc1\x39\x35\xe3\x93\x36\x23\x4e\x1a\x55\x4e\x5a\x2b\x5b\x83\xf6\x6e\x8a\x27\x6f\xad\xa7\xcb\x72\x82\x94\x28\xe8\xbf\x04\x6d\xb2\x06\x25\xad\xfc\x76\x2e\x25\x6a\x52\xf7\xaa\xae\x36\x17\x72\x97\x4c\x6e\x67\x1d\xcc\xda\xe0\xce\xde\x93\xc6\xeb\xce\x4d\x62\x71\xb6\x07\x75\x05\xb7\xb3\xf7\x82\x97\x12\xb1\xc1\xf1\x1e\x8c\x62\x25\x52\x20\x99\x61\x5b\xfc\x5f\x6c\xe5\x7d\x28\xfa\xad\x41\x5a\x7f\x6c\xf5\xe7\xdc\x75\x80\xd8\xce\x76\xea\xfd\x7f\x7b\xf6\x20\x72\x4a\xbe\x06\xef\xf2\x56\x1e\xf7\xc8\x31\xe9\xe8\xa4\x3f\x11\x07\xdc\x3d\x84\x77\x9e\x73\x6c\xb5\xdc\x5d\x68\x4d\xc3\xdc\x14\xdc\xf7\x62\xe3\x3e\x67\x58\xe4\x1d\x0f\xc7\xa2\x1e\x1e\x17\x83\xc7\x51\x2b\x63\xbb\x7a\x1c\x35\x5b\xd0\xab\x67\xba\x86\xac\x2d\x5e\xe0\xd8\xff\x0e\x14\x45\xf0\xa3\x21\xca\x00\x81\x9f\x5f\x41\x55\x52\x62\x6c\x8a\x93\x60\xd3\xa8\x4b\x75\xdd\x87\xa2\x94\x28\x0d\x6b\xa9\x76\x44\x51\xa8\x84\x61\xdc\xce\xef\x81\x28\x3c\x95\x8d\x1a\xcd\x2b\x1b\xdd\xb6\x84\xfb\xe7\xfd\xdf\x33\x7f\x12\xf6\xed\x3f\x99\x86\x48\xb2\xfc\x02\xa5\x4b\x68\x9d\xe8\x04\xbe\x75\xad\x84\xff\xcc\x37\x39\xd3\xd3\x90\x18\xa3\xfc\xc9\xc0\x35\x26\x53\x6b\xe5\x79\xbf\x31\xeb\xd6\xc7\xc3\x83\xf6\x14\x97\x53\x41\x7e\x2a\x1a\x5a\xfa\x4c\x6b\xbf\x76\xb4\xc9\x4d\x8f\xfb\xd0\xcf\x26\x1f\x4f\x4e\x36\x3b\x9d\xf9\xd3\x5e\x92\xcb\x60\x06\xcc\x27\xf6\xe8\x4d\xce\x11\x10\x4a\x5f\xda\x33\xe5\x7b\x17\xce\xff\xb9\xaf\x4c\x4f\x6a\xaf\xc3\xf9\xd3\xfa\xae\xef\xd9\x1f\x51\x36\xa3\x93\x69\xa8\xab\xb4\xbe\xb3\xf0\x3f\x3b\xb5\x74\x2d\x9d\xf3\xe7\x71\xae\x38\x2b\x3d\xac\x8c\x61\xf9\x11\x8c\xca\x95\x27\xd2\x4a\x2b\xb3\xd9\xd9\xf1\xc6\xaa\x7e\x36\xed\x5d\x82\x7d\xad\x6d\x4d\xc6\x74\x0e\x04\x76\x98\x6a\x77\xc3\x00\xcd\x19\x70\x97\x3d\xf5\xa5\xce\x8b\xef\x5f\xf5\x2f\x76\xba\x63\xe2\xd7\x22\xba\x6f\xbc\x17\xaf\x51\x2e\x7e\x55\xde\xed\x76\xe1\x46\xca\x0d\xaf\xbf\x27\x77\xf7\x2c\x11\x29\x59\x78\xa7\x3d\x20\x7a\x2f\x32\xa0\xb8\x46\xb5\xea\xf1\x6f\x2f\x5f\xe2\xa8\xf9\xae\x19\x47\xcd\xff\xea\xf8\x4f\x00\x00\x00\xff\xff\xe6\xef\x2a\x89\xe7\x21\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x8d, 0xb, 0x7a, 0xfd, 0x70, 0x68, 0x68, 0xd2, 0xd8, 0xf3, 0xf6, 0xac, 0x72, 0xed, 0xc2, 0x76, 0x18, 0x2d, 0x1, 0xe5, 0x3b, 0x55, 0xb, 0xce, 0xfc, 0xb6, 0xd5, 0x59, 0xc3, 0x94, 0x5b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
