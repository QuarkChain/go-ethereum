package test

import (
	"context"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/params"
	"io/ioutil"
	"math/big"
	"sync"
	"testing"
	"time"
)

func generateTx(c *ethclient.Client, from common.Address, to *common.Address, nonce uint64, data []byte, value *big.Int, chainId *big.Int) (*types.Transaction, error) {
	ctx := context.Background()
	tipCap, err := c.SuggestGasTipCap(ctx)
	if err != nil {
		return nil, err
	}

	latestHeader, err := c.HeaderByNumber(ctx, nil)
	if err != nil {
		return nil, err
	}

	gasFeeCap := new(big.Int).Add(
		tipCap, new(big.Int).Mul(latestHeader.BaseFee, big.NewInt(2)),
	)

	msg := ethereum.CallMsg{
		From:      from,
		To:        to,
		GasTipCap: tipCap,
		GasFeeCap: gasFeeCap,
		Value:     value,
		Data:      data,
	}
	gasLimit, err := c.EstimateGas(ctx, msg)
	if err != nil {
		return nil, err
	}

	tx := types.NewTx(&types.DynamicFeeTx{
		ChainID:   chainId,
		Nonce:     nonce,
		To:        to,
		Value:     big.NewInt(0),
		GasTipCap: tipCap,
		GasFeeCap: gasFeeCap,
		Gas:       gasLimit,
		Data:      data,
	})

	return tx, nil

}

const web3QRPCUrl = "http://127.0.0.1:8545"
const web3QValKetStoreFilePath = "/Users/chenyanlong/Work/go-ethereum/cmd/geth/data_val_0/keystore/UTC--2022-06-07T04-15-42.696295000Z--96f22a48dcd4dfb99a11560b24bee02f374ca77d"
const passwd = "123"
const contractInitCode = "0x608060405234801561001057600080fd5b50611828806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063518a351011610071578063518a3510146101695780638c95e054146101995780639afb416c146101b7578063a25a92aa146101d5578063d0496d6a146101f1578063f9f8a5881461020f576100a9565b806306661abd146100ae57806318d9adab146100cc57806320615362146100fc5780632fbc69e21461012d5780633fa4f2451461014b575b600080fd5b6100b661022b565b6040516100c39190611387565b60405180910390f35b6100e660048036038101906100e1919061100f565b610231565b6040516100f39190611291565b60405180910390f35b6101166004803603810190610111919061103c565b610255565b6040516101249291906112ce565b60405180910390f35b610135610512565b6040516101429190611305565b60405180910390f35b6101536105a0565b6040516101609190611387565b60405180910390f35b610183600480360381019061017e919061103c565b6105a6565b60405161019091906112ac565b60405180910390f35b6101a1610703565b6040516101ae9190611276565b60405180910390f35b6101bf61070a565b6040516101cc9190611276565b60405180910390f35b6101ef60048036038101906101ea919061103c565b61072e565b005b6101f961093c565b60405161020691906112ac565b60405180910390f35b6102296004803603810190610224919061103c565b6109ca565b005b60035481565b6001818154811061024157600080fd5b906000526020600020016000915090505481565b606080600087878787876040516024016102739594939291906113a2565b6040516020818303038152906040527f99e20070000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806203330373ffffffffffffffffffffffffffffffffffffffff168360405161031d919061125f565b6000604051808303816000865af19150503d806000811461035a576040519150601f19603f3d011682016040523d82523d6000602084013e61035f565b606091505b5091509150816103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90611367565b60405180910390fd5b60008a8a60018b6103b591906114eb565b8a8a6040516024016103cb9594939291906113a2565b6040516020818303038152906040527f99e20070000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806203330373ffffffffffffffffffffffffffffffffffffffff1683604051610475919061125f565b6000604051808303816000865af19150503d80600081146104b2576040519150601f19603f3d011682016040523d82523d6000602084013e6104b7565b606091505b5091509150816104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f390611347565b60405180910390fd5b8381975097505050505050509550959350505050565b6005805461051f906115cc565b80601f016020809104026020016040519081016040528092919081815260200182805461054b906115cc565b80156105985780601f1061056d57610100808354040283529160200191610598565b820191906000526020600020905b81548152906001019060200180831161057b57829003601f168201915b505050505081565b60025481565b6060600086868686866040516024016105c39594939291906113a2565b6040516020818303038152906040527f99e20070000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806203330373ffffffffffffffffffffffffffffffffffffffff168360405161066d919061125f565b6000604051808303816000865af19150503d80600081146106aa576040519150601f19603f3d011682016040523d82523d6000602084013e6106af565b606091505b5091509150816106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106eb90611327565b60405180910390fd5b80935050505095945050505050565b6203330381565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600085858585856040516024016107499594939291906113a2565b6040516020818303038152906040527f99e20070000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806203330373ffffffffffffffffffffffffffffffffffffffff16836040516107f3919061125f565b6000604051808303816000865af19150503d8060008114610830576040519150601f19603f3d011682016040523d82523d6000602084013e610835565b606091505b50915091508161087157808060200190518101906108539190610fc6565b60059080519060200190610868929190610bc1565b50505050610935565b60008060008380602001905181019061088a9190610f3b565b925092509250826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600190805190602001906108e6929190610c47565b5060008060008380602001905181019061090091906110b7565b9250925092508260028190555081600381905550806004908051906020019061092a929190610c94565b505050505050505050505b5050505050565b60048054610949906115cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610975906115cc565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b505050505081565b600085858585856040516024016109e59594939291906113a2565b6040516020818303038152906040527f99e20070000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806203330373ffffffffffffffffffffffffffffffffffffffff1683604051610a8f919061125f565b6000604051808303816000865af19150503d8060008114610acc576040519150601f19603f3d011682016040523d82523d6000602084013e610ad1565b606091505b509150915081610b0d5780806020019051810190610aef9190610fc6565b60059080519060200190610b04929190610bc1565b50505050610bba565b600080600083806020019051810190610b269190610f3b565b925092509250826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160019080519060200190610b82929190610c47565b50600080600083806020019051810190610b9c91906110b7565b92509250925082600281905550816003819055505050505050505050505b5050505050565b828054610bcd906115cc565b90600052602060002090601f016020900481019282610bef5760008555610c36565b82601f10610c0857805160ff1916838001178555610c36565b82800160010185558215610c36579182015b82811115610c35578251825591602001919060010190610c1a565b5b509050610c439190610d1a565b5090565b828054828255906000526020600020908101928215610c83579160200282015b82811115610c82578251825591602001919060010190610c67565b5b509050610c909190610d37565b5090565b828054610ca0906115cc565b90600052602060002090601f016020900481019282610cc25760008555610d09565b82601f10610cdb57805160ff1916838001178555610d09565b82800160010185558215610d09579182015b82811115610d08578251825591602001919060010190610ced565b5b509050610d169190610d1a565b5090565b5b80821115610d33576000816000905550600101610d1b565b5090565b5b80821115610d50576000816000905550600101610d38565b5090565b6000610d67610d628461141a565b6113f5565b90508083825260208201905082856020860282011115610d8a57610d896116c1565b5b60005b85811015610dba5781610da08882610ea0565b845260208401935060208301925050600181019050610d8d565b5050509392505050565b6000610dd7610dd284611446565b6113f5565b905082815260208101848484011115610df357610df26116c6565b5b610dfe848285611599565b509392505050565b6000610e19610e1484611477565b6113f5565b905082815260208101848484011115610e3557610e346116c6565b5b610e40848285611599565b509392505050565b600081519050610e57816117ad565b92915050565b600082601f830112610e7257610e716116bc565b5b8151610e82848260208601610d54565b91505092915050565b600081359050610e9a816117c4565b92915050565b600081519050610eaf816117c4565b92915050565b600082601f830112610eca57610ec96116bc565b5b8151610eda848260208601610dc4565b91505092915050565b600082601f830112610ef857610ef76116bc565b5b8151610f08848260208601610e06565b91505092915050565b600081359050610f20816117db565b92915050565b600081519050610f35816117db565b92915050565b600080600060608486031215610f5457610f536116d0565b5b6000610f6286828701610e48565b935050602084015167ffffffffffffffff811115610f8357610f826116cb565b5b610f8f86828701610e5d565b925050604084015167ffffffffffffffff811115610fb057610faf6116cb565b5b610fbc86828701610eb5565b9150509250925092565b600060208284031215610fdc57610fdb6116d0565b5b600082015167ffffffffffffffff811115610ffa57610ff96116cb565b5b61100684828501610ee3565b91505092915050565b600060208284031215611025576110246116d0565b5b600061103384828501610f11565b91505092915050565b600080600080600060a08688031215611058576110576116d0565b5b600061106688828901610f11565b955050602061107788828901610e8b565b945050604061108888828901610f11565b935050606061109988828901610f11565b92505060806110aa88828901610f11565b9150509295509295909350565b6000806000606084860312156110d0576110cf6116d0565b5b60006110de86828701610f26565b93505060206110ef86828701610f26565b925050604084015167ffffffffffffffff8111156111105761110f6116cb565b5b61111c86828701610eb5565b9150509250925092565b61112f81611541565b82525050565b61113e81611565565b82525050565b600061114f826114a8565b61115981856114be565b9350611169818560208601611599565b611172816116d5565b840191505092915050565b6000611188826114a8565b61119281856114cf565b93506111a2818560208601611599565b80840191505092915050565b60006111b9826114b3565b6111c381856114da565b93506111d3818560208601611599565b6111dc816116d5565b840191505092915050565b60006111f46018836114da565b91506111ff826116e6565b602082019050919050565b60006112176025836114da565b91506112228261170f565b604082019050919050565b600061123a6025836114da565b91506112458261175e565b604082019050919050565b6112598161158f565b82525050565b600061126b828461117d565b915081905092915050565b600060208201905061128b6000830184611126565b92915050565b60006020820190506112a66000830184611135565b92915050565b600060208201905081810360008301526112c68184611144565b905092915050565b600060408201905081810360008301526112e88185611144565b905081810360208301526112fc8184611144565b90509392505050565b6000602082019050818103600083015261131f81846111ae565b905092915050565b60006020820190508181036000830152611340816111e7565b9050919050565b600060208201905081810360008301526113608161120a565b9050919050565b600060208201905081810360008301526113808161122d565b9050919050565b600060208201905061139c6000830184611250565b92915050565b600060a0820190506113b76000830188611250565b6113c46020830187611135565b6113d16040830186611250565b6113de6060830185611250565b6113eb6080830184611250565b9695505050505050565b60006113ff611410565b905061140b82826115fe565b919050565b6000604051905090565b600067ffffffffffffffff8211156114355761143461168d565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156114615761146061168d565b5b61146a826116d5565b9050602081019050919050565b600067ffffffffffffffff8211156114925761149161168d565b5b61149b826116d5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006114f68261158f565b91506115018361158f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115365761153561162f565b5b828201905092915050565b600061154c8261156f565b9050919050565b600061155e8261156f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156115b757808201518184015260208101905061159c565b838111156115c6576000848401525b50505050565b600060028204905060018216806115e457607f821691505b602082108114156115f8576115f761165e565b5b50919050565b611607826116d5565b810181811067ffffffffffffffff821117156116265761162561168d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6661696c20746f2063726f737320636861696e2063616c6c0000000000000000600082015250565b7f63726f73732063616c6c2032206661696c20746f2063726f737320636861696e60008201527f2063616c6c000000000000000000000000000000000000000000000000000000602082015250565b7f63726f73732063616c6c2031206661696c20746f2063726f737320636861696e60008201527f2063616c6c000000000000000000000000000000000000000000000000000000602082015250565b6117b681611553565b81146117c157600080fd5b50565b6117cd81611565565b81146117d857600080fd5b50565b6117e48161158f565b81146117ef57600080fd5b5056fea2646970667358221220a6fe70b73a9c589d7fedf7211c726c179efd1f430a88256d06030294cdf85c1d64736f6c63430008070033"
const externalCallData = "0x518a351000000000000000000000000000000000000000000000000000000000000000047ba399701b823976c367686562ca9fa11ecc81341d2b0026c5615740bd164e460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000000a"
const expectExternalCallResult = "d317fdd3569ed357fdd3569a7fdd356bb6fdd356b4d34d34d34d34d34d34d34d34d34d34d34d34ef9d77db4737e9fe35ddaeb6f3469de78e3cefbeba69ed1fefcd1be9fe7cd34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34eb4d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34734d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d3675c7bbdb575cd9dd3bf1cd37d39df469e6f9e75d5e6fbebaeb76bbd39efdedcd9ae1ae1de356bbd1d75d7dbf1e7dc6bdd34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d35d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34734d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d36d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d35d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34eb4d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34dbc6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6dbd34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d35f36e9bd3c"

func BenchmarkExternalTx(b *testing.B) {

	var chainId = big.NewInt(3333)

	f, err := ioutil.ReadFile(web3QValKetStoreFilePath)
	if err != nil {
		b.Error(err)
	}
	key, err := keystore.DecryptKey(f, passwd)
	if err != nil {
		b.Error(err)
	}

	ctx := context.Background()
	client, err := ethclient.Dial(web3QRPCUrl)
	var accountNonce uint64 = 0

	bNumber, err := client.BlockNumber(context.Background())
	if err != nil {
		b.Fatal(err)
	}

	// deploy contract using called externalCall precompile contract
	nonce, err := client.NonceAt(ctx, key.Address, nil)
	if err != nil {
		b.Fatal(err)
	}
	accountNonce = nonce
	tx, err := generateTx(client, key.Address, nil, accountNonce, common.FromHex(contractInitCode), nil, chainId)
	if err != nil {
		b.Error(err)
	}
	accountNonce++

	signer := types.MakeSigner(params.Web3QTestnetChainConfig, big.NewInt(0).SetUint64(bNumber))
	//signer := types.NewLondonSigner(chainId)
	signedTx, err := types.SignTx(tx, signer, key.PrivateKey)
	if err != nil {
		b.Fatal(err)
	}

	actualFrom, err := signer.Sender(signedTx)
	if err != nil {
		b.Fatal(err)
	}
	if actualFrom != key.Address {
		b.Error("recover sender is error")
	}

	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		b.Error(err)
	}

	// get contract address
	var receipt *types.Receipt
	for {
		receipt, err = client.TransactionReceipt(context.Background(), signedTx.Hash())

		if err != nil {
			if err == ethereum.NotFound {
				time.Sleep(10 * time.Second)
			} else {
				b.Fatal(err)
			}
		} else {
			break
		}
	}

	// call external call
	sendedTxHashs := make([]common.Hash, 0)
	for n := 0; n < b.N; n++ {
		externalTx, err := generateTx(client, key.Address, &receipt.ContractAddress, accountNonce, common.FromHex(externalCallData), nil, chainId)
		if err != nil {
			b.Error(err)
		}
		esignedTx, err := types.SignTx(externalTx, signer, key.PrivateKey)
		if err != nil {
			b.Error(err)
		}

		err = client.SendTransaction(context.Background(), esignedTx)
		if err != nil {
			b.Error(err)
		}

		sendedTxHashs = append(sendedTxHashs, esignedTx.Hash())
		accountNonce++
	}

	var wg sync.WaitGroup
	for i, txhash := range sendedTxHashs {
		wg.Add(1)
		go func() {
			for {
				_, err := client.TransactionReceipt(context.Background(), txhash)
				if err != nil {
					if err == ethereum.NotFound {
						time.Sleep(10 * time.Second)
					} else {
						b.Fatalf("index:%d,txHash:%s , err:%s", i, txhash.Hex(), err.Error())
						break
					}
				} else {
					result, err := client.ExternalCallResult(context.Background(), txhash)
					if err != nil {
						b.Fatalf("index:%d,txHash:%s , err:%s", i, txhash.Hex(), err.Error())
					} else {
						if common.Bytes2Hex(result.ExternalCallResult) != expectExternalCallResult {
							b.Fatalf("index:%d,txHash:%s , err:%s", i, txhash.Hex(), "no equal with expect call result")
						}
					}
					break
				}
			}
			wg.Done()
		}()
	}
	wg.Wait()

}

func TestWaitingResult(t *testing.T) {
	txHash := common.HexToHash("0x17c158a8f839343a2469978e7fed35b6dc12e824fbcf92de67d1f7839d4f6f03")
	client, err := ethclient.Dial(web3QRPCUrl)
	if err != nil {
		t.Fatal(err)
	}
	transactionReceipt, err := client.ExternalCallResult(context.Background(), txHash)
	if err != nil {
		t.Fatal(err)
	} else {
		if common.Bytes2Hex(transactionReceipt.ExternalCallResult) != expectExternalCallResult {
			t.Fatal("call result no equal")
		}
	}
}
